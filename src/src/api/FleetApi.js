/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateFleetRequest from "../model/CreateFleetRequest";
import Error from "../model/Error";
import Fleet from "../model/Fleet";
import GetProjectFleets200Response from "../model/GetProjectFleets200Response";
import PutDeviceFleetsRequest from "../model/PutDeviceFleetsRequest";
import UpdateFleetRequest from "../model/UpdateFleetRequest";

/**
 * Fleet service.
 * @module api/FleetApi
 * @version 1.0.19
 */
export default class FleetApi {
  /**
   * Constructs a new FleetApi.
   * @alias module:api/FleetApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Fleet
   * @param {String} projectUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  createFleetWithHttpInfo(projectUID, createFleetRequest) {
    let postBody = createFleetRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling createFleet"
      );
    }
    // verify the required parameter 'createFleetRequest' is set
    if (createFleetRequest === undefined || createFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'createFleetRequest' when calling createFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Fleet
   * @param {String} projectUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  createFleet(projectUID, createFleetRequest) {
    return this.createFleetWithHttpInfo(projectUID, createFleetRequest).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Delete Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteFleetWithHttpInfo(projectUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling deleteFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteFleet(projectUID, fleetUID) {
    return this.deleteFleetWithHttpInfo(projectUID, fleetUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Device Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  getDeviceFleetsWithHttpInfo(projectUID, deviceUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDeviceFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Device Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  getDeviceFleets(projectUID, deviceUID) {
    return this.getDeviceFleetsWithHttpInfo(projectUID, deviceUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Project Fleets
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  getProjectFleetsWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Fleets
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  getProjectFleets(projectUID) {
    return this.getProjectFleetsWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Add Device to Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  putDeviceFleetsWithHttpInfo(projectUID, deviceUID, putDeviceFleetsRequest) {
    let postBody = putDeviceFleetsRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'putDeviceFleetsRequest' is set
    if (
      putDeviceFleetsRequest === undefined ||
      putDeviceFleetsRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'putDeviceFleetsRequest' when calling putDeviceFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/fleets",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Add Device to Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  putDeviceFleets(projectUID, deviceUID, putDeviceFleetsRequest) {
    return this.putDeviceFleetsWithHttpInfo(
      projectUID,
      deviceUID,
      putDeviceFleetsRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  updateFleetWithHttpInfo(projectUID, fleetUID, updateFleetRequest) {
    let postBody = updateFleetRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'updateFleetRequest' is set
    if (updateFleetRequest === undefined || updateFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'updateFleetRequest' when calling updateFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  updateFleet(projectUID, fleetUID, updateFleetRequest) {
    return this.updateFleetWithHttpInfo(
      projectUID,
      fleetUID,
      updateFleetRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
