/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DeviceSession from "../model/DeviceSession";
import Error from "../model/Error";
import Event from "../model/Event";

/**
 * ExternalDevices service.
 * @module api/ExternalDevicesApi
 * @version 1.0.36
 */
export default class ExternalDevicesApi {
  /**
   * Constructs a new ExternalDevicesApi.
   * @alias module:api/ExternalDevicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Creates an event using specified webhook
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/Event} event Event Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  createEventExtDeviceWithHttpInfo(productUID, deviceUID, event) {
    let postBody = event;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling createEventExtDevice"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling createEventExtDevice"
      );
    }
    // verify the required parameter 'event' is set
    if (event === undefined || event === null) {
      throw new Error(
        "Missing the required parameter 'event' when calling createEventExtDevice"
      );
    }

    let pathParams = {
      productUID: productUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/ext-devices/{deviceUID}/event",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Creates an event using specified webhook
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/Event} event Event Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  createEventExtDevice(productUID, deviceUID, event) {
    return this.createEventExtDeviceWithHttpInfo(
      productUID,
      deviceUID,
      event
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Closes the session for the specified device if open
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/DeviceSession} deviceSession Session Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  extDeviceSessionCloseWithHttpInfo(productUID, deviceUID, deviceSession) {
    let postBody = deviceSession;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling extDeviceSessionClose"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling extDeviceSessionClose"
      );
    }
    // verify the required parameter 'deviceSession' is set
    if (deviceSession === undefined || deviceSession === null) {
      throw new Error(
        "Missing the required parameter 'deviceSession' when calling extDeviceSessionClose"
      );
    }

    let pathParams = {
      productUID: productUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/ext-devices/{deviceUID}/session/close",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Closes the session for the specified device if open
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/DeviceSession} deviceSession Session Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  extDeviceSessionClose(productUID, deviceUID, deviceSession) {
    return this.extDeviceSessionCloseWithHttpInfo(
      productUID,
      deviceUID,
      deviceSession
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a Session for the specified device.  | If a session is currently open it will be closed and a new one opened.
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/DeviceSession} deviceSession Session Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  extDeviceSessionOpenWithHttpInfo(productUID, deviceUID, deviceSession) {
    let postBody = deviceSession;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling extDeviceSessionOpen"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling extDeviceSessionOpen"
      );
    }
    // verify the required parameter 'deviceSession' is set
    if (deviceSession === undefined || deviceSession === null) {
      throw new Error(
        "Missing the required parameter 'deviceSession' when calling extDeviceSessionOpen"
      );
    }

    let pathParams = {
      productUID: productUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/ext-devices/{deviceUID}/session/open",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a Session for the specified device.  | If a session is currently open it will be closed and a new one opened.
   * @param {String} productUID
   * @param {String} deviceUID
   * @param {module:model/DeviceSession} deviceSession Session Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  extDeviceSessionOpen(productUID, deviceUID, deviceSession) {
    return this.extDeviceSessionOpenWithHttpInfo(
      productUID,
      deviceUID,
      deviceSession
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
