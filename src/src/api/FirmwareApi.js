/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import FirmwareInfo from "../model/FirmwareInfo";

/**
 * Firmware service.
 * @module api/FirmwareApi
 * @version 1.0.19
 */
export default class FirmwareApi {
  /**
   * Constructs a new FirmwareApi.
   * @alias module:api/FirmwareApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.productUID
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirmwareInfo>} and HTTP response
   */
  getFirmwareInfoWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getFirmwareInfo"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {
      productUID: opts["productUID"],
      firmwareType: opts["firmwareType"],
      version: opts["version"],
      target: opts["target"],
      filename: opts["filename"],
      md5: opts["md5"],
      unpublished: opts["unpublished"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [FirmwareInfo];
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/firmware",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.productUID
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirmwareInfo>}
   */
  getFirmwareInfo(projectUID, opts) {
    return this.getFirmwareInfoWithHttpInfo(projectUID, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
