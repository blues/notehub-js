/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CloneProjectRequest from "../model/CloneProjectRequest";
import CreateProductRequest from "../model/CreateProductRequest";
import CreateProjectRequest from "../model/CreateProjectRequest";
import Error from "../model/Error";
import GetProjectMembers200Response from "../model/GetProjectMembers200Response";
import GetProjectProducts200Response from "../model/GetProjectProducts200Response";
import GetProjects200Response from "../model/GetProjects200Response";
import Product from "../model/Product";
import Project from "../model/Project";

/**
 * Project service.
 * @module api/ProjectApi
 * @version 1.0.19
 */
export default class ProjectApi {
  /**
   * Constructs a new ProjectApi.
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Clone a Project
   * @param {String} projectUID The project UID to be cloned.
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  cloneProjectWithHttpInfo(projectUID, cloneProjectRequest) {
    let postBody = cloneProjectRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling cloneProject"
      );
    }
    // verify the required parameter 'cloneProjectRequest' is set
    if (cloneProjectRequest === undefined || cloneProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'cloneProjectRequest' when calling cloneProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/clone",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Clone a Project
   * @param {String} projectUID The project UID to be cloned.
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  cloneProject(projectUID, cloneProjectRequest) {
    return this.cloneProjectWithHttpInfo(projectUID, cloneProjectRequest).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Create Product within a Project
   * @param {String} projectUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
   */
  createProductWithHttpInfo(projectUID, createProductRequest) {
    let postBody = createProductRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling createProduct"
      );
    }
    // verify the required parameter 'createProductRequest' is set
    if (createProductRequest === undefined || createProductRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProductRequest' when calling createProduct"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/products",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Product within a Project
   * @param {String} projectUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
   */
  createProduct(projectUID, createProductRequest) {
    return this.createProductWithHttpInfo(
      projectUID,
      createProductRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  createProjectWithHttpInfo(createProjectRequest) {
    let postBody = createProjectRequest;
    // verify the required parameter 'createProjectRequest' is set
    if (createProjectRequest === undefined || createProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProjectRequest' when calling createProject"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  createProject(createProjectRequest) {
    return this.createProjectWithHttpInfo(createProjectRequest).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProject(projectUID) {
    return this.deleteProjectWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  disableGlobalTransformationWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling disableGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation/disable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  disableGlobalTransformation(projectUID) {
    return this.disableGlobalTransformationWithHttpInfo(projectUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  enableGlobalTransformationWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling enableGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation/enable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  enableGlobalTransformation(projectUID) {
    return this.enableGlobalTransformationWithHttpInfo(projectUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProject(projectUID) {
    return this.getProjectWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectByProductWithHttpInfo(productUID) {
    let postBody = null;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling getProjectByProduct"
      );
    }

    let pathParams = {
      productUID: productUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/project",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProjectByProduct(productUID) {
    return this.getProjectByProductWithHttpInfo(productUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Project Members
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectMembers200Response} and HTTP response
   */
  getProjectMembersWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectMembers"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectMembers200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/members",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Members
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectMembers200Response}
   */
  getProjectMembers(projectUID) {
    return this.getProjectMembersWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Products within a Project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectProducts200Response} and HTTP response
   */
  getProjectProductsWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectProducts"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectProducts200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/products",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Products within a Project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectProducts200Response}
   */
  getProjectProducts(projectUID) {
    return this.getProjectProductsWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjects200Response} and HTTP response
   */
  getProjectsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjects200Response;
    return this.apiClient.callApi(
      "/v1/projects",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjects200Response}
   */
  getProjects() {
    return this.getProjectsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setGlobalTransformationWithHttpInfo(projectUID, body) {
    let postBody = body;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling setGlobalTransformation"
      );
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling setGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setGlobalTransformation(projectUID, body) {
    return this.setGlobalTransformationWithHttpInfo(projectUID, body).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }
}
