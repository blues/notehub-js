/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CloneProjectRequest from "../model/CloneProjectRequest";
import CreateFleetRequest from "../model/CreateFleetRequest";
import CreateProductRequest from "../model/CreateProductRequest";
import CreateProjectRequest from "../model/CreateProjectRequest";
import DeleteDeviceFleetsRequest from "../model/DeleteDeviceFleetsRequest";
import EnvironmentVariables from "../model/EnvironmentVariables";
import Error from "../model/Error";
import FirmwareInfo from "../model/FirmwareInfo";
import Fleet from "../model/Fleet";
import GetProjectFleets200Response from "../model/GetProjectFleets200Response";
import GetProjectMembers200Response from "../model/GetProjectMembers200Response";
import GetProjectProducts200Response from "../model/GetProjectProducts200Response";
import GetProjects200Response from "../model/GetProjects200Response";
import OTAStatusList from "../model/OTAStatusList";
import OTAUpdateRequest from "../model/OTAUpdateRequest";
import OTAUpdateStatus from "../model/OTAUpdateStatus";
import Product from "../model/Product";
import Project from "../model/Project";
import PutDeviceFleetsRequest from "../model/PutDeviceFleetsRequest";
import UpdateFleetRequest from "../model/UpdateFleetRequest";

/**
 * Project service.
 * @module api/ProjectApi
 * @version 1.0.21
 */
export default class ProjectApi {
  /**
   * Constructs a new ProjectApi.
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Clone a Project
   * @param {String} projectUID The project UID to be cloned.
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  cloneProjectWithHttpInfo(projectUID, cloneProjectRequest) {
    let postBody = cloneProjectRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling cloneProject"
      );
    }
    // verify the required parameter 'cloneProjectRequest' is set
    if (cloneProjectRequest === undefined || cloneProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'cloneProjectRequest' when calling cloneProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/clone",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Clone a Project
   * @param {String} projectUID The project UID to be cloned.
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  cloneProject(projectUID, cloneProjectRequest) {
    return this.cloneProjectWithHttpInfo(projectUID, cloneProjectRequest).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Create Fleet
   * @param {String} projectUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  createFleetWithHttpInfo(projectUID, createFleetRequest) {
    let postBody = createFleetRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling createFleet"
      );
    }
    // verify the required parameter 'createFleetRequest' is set
    if (createFleetRequest === undefined || createFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'createFleetRequest' when calling createFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Fleet
   * @param {String} projectUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  createFleet(projectUID, createFleetRequest) {
    return this.createFleetWithHttpInfo(projectUID, createFleetRequest).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Create Product within a Project
   * @param {String} projectUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
   */
  createProductWithHttpInfo(projectUID, createProductRequest) {
    let postBody = createProductRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling createProduct"
      );
    }
    // verify the required parameter 'createProductRequest' is set
    if (createProductRequest === undefined || createProductRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProductRequest' when calling createProduct"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/products",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Product within a Project
   * @param {String} projectUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
   */
  createProduct(projectUID, createProductRequest) {
    return this.createProductWithHttpInfo(
      projectUID,
      createProductRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  createProjectWithHttpInfo(createProjectRequest) {
    let postBody = createProjectRequest;
    // verify the required parameter 'createProjectRequest' is set
    if (createProjectRequest === undefined || createProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProjectRequest' when calling createProject"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  createProject(createProjectRequest) {
    return this.createProjectWithHttpInfo(createProjectRequest).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Remove Device from Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/DeleteDeviceFleetsRequest} deleteDeviceFleetsRequest The fleets to remove from the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  deleteDeviceFleetsWithHttpInfo(
    projectUID,
    deviceUID,
    deleteDeviceFleetsRequest
  ) {
    let postBody = deleteDeviceFleetsRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling deleteDeviceFleets"
      );
    }
    // verify the required parameter 'deleteDeviceFleetsRequest' is set
    if (
      deleteDeviceFleetsRequest === undefined ||
      deleteDeviceFleetsRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'deleteDeviceFleetsRequest' when calling deleteDeviceFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/fleets",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Remove Device from Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/DeleteDeviceFleetsRequest} deleteDeviceFleetsRequest The fleets to remove from the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  deleteDeviceFleets(projectUID, deviceUID, deleteDeviceFleetsRequest) {
    return this.deleteDeviceFleetsWithHttpInfo(
      projectUID,
      deviceUID,
      deleteDeviceFleetsRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteFleetWithHttpInfo(projectUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling deleteFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteFleet(projectUID, fleetUID) {
    return this.deleteFleetWithHttpInfo(projectUID, fleetUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Delete environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  deleteFleetEnvironmentVariableWithHttpInfo(projectUID, fleetUID, key) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteFleetEnvironmentVariable"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling deleteFleetEnvironmentVariable"
      );
    }
    // verify the required parameter 'key' is set
    if (key === undefined || key === null) {
      throw new Error(
        "Missing the required parameter 'key' when calling deleteFleetEnvironmentVariable"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
      key: key,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}/environment_variables/{key}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  deleteFleetEnvironmentVariable(projectUID, fleetUID, key) {
    return this.deleteFleetEnvironmentVariableWithHttpInfo(
      projectUID,
      fleetUID,
      key
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProject(projectUID) {
    return this.deleteProjectWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Delete an environment variable of a project by key
   * @param {String} projectUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  deleteProjectEnvironmentVariableWithHttpInfo(projectUID, key) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteProjectEnvironmentVariable"
      );
    }
    // verify the required parameter 'key' is set
    if (key === undefined || key === null) {
      throw new Error(
        "Missing the required parameter 'key' when calling deleteProjectEnvironmentVariable"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      key: key,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/environment_variables/{key}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete an environment variable of a project by key
   * @param {String} projectUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  deleteProjectEnvironmentVariable(projectUID, key) {
    return this.deleteProjectEnvironmentVariableWithHttpInfo(
      projectUID,
      key
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  disableGlobalTransformationWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling disableGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation/disable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  disableGlobalTransformation(projectUID) {
    return this.disableGlobalTransformationWithHttpInfo(projectUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  enableGlobalTransformationWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling enableGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation/enable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  enableGlobalTransformation(projectUID) {
    return this.enableGlobalTransformationWithHttpInfo(projectUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Device Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  getDeviceFleetsWithHttpInfo(projectUID, deviceUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDeviceFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Device Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  getDeviceFleets(projectUID, deviceUID) {
    return this.getDeviceFleetsWithHttpInfo(projectUID, deviceUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.product
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirmwareInfo>} and HTTP response
   */
  getFirmwareInfoWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getFirmwareInfo"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {
      product: opts["product"],
      firmwareType: opts["firmwareType"],
      version: opts["version"],
      target: opts["target"],
      filename: opts["filename"],
      md5: opts["md5"],
      unpublished: opts["unpublished"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [FirmwareInfo];
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/firmware",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.product
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirmwareInfo>}
   */
  getFirmwareInfo(projectUID, opts) {
    return this.getFirmwareInfoWithHttpInfo(projectUID, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  getFleetEnvironmentVariablesWithHttpInfo(projectUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling getFleetEnvironmentVariables"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}/environment_variables",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  getFleetEnvironmentVariables(projectUID, fleetUID) {
    return this.getFleetEnvironmentVariablesWithHttpInfo(
      projectUID,
      fleetUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProject"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProject(projectUID) {
    return this.getProjectWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectByProductWithHttpInfo(productUID) {
    let postBody = null;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling getProjectByProduct"
      );
    }

    let pathParams = {
      productUID: productUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/project",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProjectByProduct(productUID) {
    return this.getProjectByProductWithHttpInfo(productUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get environment variables of a project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  getProjectEnvironmentVariablesWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectEnvironmentVariables"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/environment_variables",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variables of a project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  getProjectEnvironmentVariables(projectUID) {
    return this.getProjectEnvironmentVariablesWithHttpInfo(projectUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Project Fleets
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  getProjectFleetsWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Fleets
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  getProjectFleets(projectUID) {
    return this.getProjectFleetsWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Project Members
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectMembers200Response} and HTTP response
   */
  getProjectMembersWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectMembers"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectMembers200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/members",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Members
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectMembers200Response}
   */
  getProjectMembers(projectUID) {
    return this.getProjectMembersWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Project OTA Status
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.deviceUIDs An array of Device UIDs.
   * @param {Array.<String>} opts.fleetUIDs
   * @param {Array.<String>} opts.deviceTags
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OTAStatusList>} and HTTP response
   */
  getProjectOTAStatusWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectOTAStatus"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {
      deviceUIDs: this.apiClient.buildCollectionParam(
        opts["deviceUIDs"],
        "multi"
      ),
      fleetUIDs: this.apiClient.buildCollectionParam(
        opts["fleetUIDs"],
        "multi"
      ),
      deviceTags: this.apiClient.buildCollectionParam(
        opts["deviceTags"],
        "multi"
      ),
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [OTAStatusList];
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/ota/status",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project OTA Status
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.deviceUIDs An array of Device UIDs.
   * @param {Array.<String>} opts.fleetUIDs
   * @param {Array.<String>} opts.deviceTags
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OTAStatusList>}
   */
  getProjectOTAStatus(projectUID, opts) {
    return this.getProjectOTAStatusWithHttpInfo(projectUID, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Products within a Project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectProducts200Response} and HTTP response
   */
  getProjectProductsWithHttpInfo(projectUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectProducts"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectProducts200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/products",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Products within a Project
   * @param {String} projectUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectProducts200Response}
   */
  getProjectProducts(projectUID) {
    return this.getProjectProductsWithHttpInfo(projectUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjects200Response} and HTTP response
   */
  getProjectsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjects200Response;
    return this.apiClient.callApi(
      "/v1/projects",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjects200Response}
   */
  getProjects() {
    return this.getProjectsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Add Device to Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectFleets200Response} and HTTP response
   */
  putDeviceFleetsWithHttpInfo(projectUID, deviceUID, putDeviceFleetsRequest) {
    let postBody = putDeviceFleetsRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'putDeviceFleetsRequest' is set
    if (
      putDeviceFleetsRequest === undefined ||
      putDeviceFleetsRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'putDeviceFleetsRequest' when calling putDeviceFleets"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetProjectFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/fleets",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Add Device to Fleets
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectFleets200Response}
   */
  putDeviceFleets(projectUID, deviceUID, putDeviceFleetsRequest) {
    return this.putDeviceFleetsWithHttpInfo(
      projectUID,
      deviceUID,
      putDeviceFleetsRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Put environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/EnvironmentVariables} environmentVariables Environment variables to be added to the fleet
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  putFleetEnvironmentVariablesWithHttpInfo(
    projectUID,
    fleetUID,
    environmentVariables
  ) {
    let postBody = environmentVariables;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling putFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling putFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'environmentVariables' is set
    if (environmentVariables === undefined || environmentVariables === null) {
      throw new Error(
        "Missing the required parameter 'environmentVariables' when calling putFleetEnvironmentVariables"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}/environment_variables",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Put environment variables of a fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/EnvironmentVariables} environmentVariables Environment variables to be added to the fleet
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  putFleetEnvironmentVariables(projectUID, fleetUID, environmentVariables) {
    return this.putFleetEnvironmentVariablesWithHttpInfo(
      projectUID,
      fleetUID,
      environmentVariables
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Put environment variables of a project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {module:model/EnvironmentVariables} opts.environmentVariables
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  putProjectEnvironmentVariablesWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = opts["environmentVariables"];
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling putProjectEnvironmentVariables"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/environment_variables",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Put environment variables of a project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {module:model/EnvironmentVariables} opts.environmentVariables
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  putProjectEnvironmentVariables(projectUID, opts) {
    return this.putProjectEnvironmentVariablesWithHttpInfo(
      projectUID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setGlobalTransformationWithHttpInfo(projectUID, body) {
    let postBody = body;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling setGlobalTransformation"
      );
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling setGlobalTransformation"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/global-transformation",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setGlobalTransformation(projectUID, body) {
    return this.setGlobalTransformationWithHttpInfo(projectUID, body).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Update Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  updateFleetWithHttpInfo(projectUID, fleetUID, updateFleetRequest) {
    let postBody = updateFleetRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'updateFleetRequest' is set
    if (updateFleetRequest === undefined || updateFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'updateFleetRequest' when calling updateFleet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Fleet
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  updateFleet(projectUID, fleetUID, updateFleetRequest) {
    return this.updateFleetWithHttpInfo(
      projectUID,
      fleetUID,
      updateFleetRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Project Firmware
   * @param {String} projectUID
   * @param {module:model/OTAUpdateRequest} oTAUpdateRequest Body or payload of firmware update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OTAUpdateStatus>} and HTTP response
   */
  updateProjectFirmwareWithHttpInfo(projectUID, oTAUpdateRequest) {
    let postBody = oTAUpdateRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling updateProjectFirmware"
      );
    }
    // verify the required parameter 'oTAUpdateRequest' is set
    if (oTAUpdateRequest === undefined || oTAUpdateRequest === null) {
      throw new Error(
        "Missing the required parameter 'oTAUpdateRequest' when calling updateProjectFirmware"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = [OTAUpdateStatus];
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/ota/update",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Project Firmware
   * @param {String} projectUID
   * @param {module:model/OTAUpdateRequest} oTAUpdateRequest Body or payload of firmware update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OTAUpdateStatus>}
   */
  updateProjectFirmware(projectUID, oTAUpdateRequest) {
    return this.updateProjectFirmwareWithHttpInfo(
      projectUID,
      oTAUpdateRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
