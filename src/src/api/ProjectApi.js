/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CloneProjectRequest from "../model/CloneProjectRequest";
import CreateFleetRequest from "../model/CreateFleetRequest";
import CreateProductRequest from "../model/CreateProductRequest";
import CreateProjectRequest from "../model/CreateProjectRequest";
import DeleteDeviceFleetsRequest from "../model/DeleteDeviceFleetsRequest";
import DeviceDfuHistory from "../model/DeviceDfuHistory";
import DeviceDfuHistoryPage from "../model/DeviceDfuHistoryPage";
import DeviceDfuStatus from "../model/DeviceDfuStatus";
import DeviceDfuStatusPage from "../model/DeviceDfuStatusPage";
import DfuActionRequest from "../model/DfuActionRequest";
import EnvTreeJsonNode from "../model/EnvTreeJsonNode";
import EnvironmentVariables from "../model/EnvironmentVariables";
import Error from "../model/Error";
import FirmwareInfo from "../model/FirmwareInfo";
import Fleet from "../model/Fleet";
import GetDeviceFleets200Response from "../model/GetDeviceFleets200Response";
import GetProjectMembers200Response from "../model/GetProjectMembers200Response";
import GetProjectProducts200Response from "../model/GetProjectProducts200Response";
import GetProjects200Response from "../model/GetProjects200Response";
import NotefileSchema from "../model/NotefileSchema";
import Product from "../model/Product";
import Project from "../model/Project";
import PutDeviceFleetsRequest from "../model/PutDeviceFleetsRequest";
import UpdateFleetRequest from "../model/UpdateFleetRequest";

/**
 * Project service.
 * @module api/ProjectApi
 * @version 1.0.38
 */
export default class ProjectApi {
  /**
   * Constructs a new ProjectApi.
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Clone a Project
   * @param {String} projectOrProductUID
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  cloneProjectWithHttpInfo(projectOrProductUID, cloneProjectRequest) {
    let postBody = cloneProjectRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling cloneProject"
      );
    }
    // verify the required parameter 'cloneProjectRequest' is set
    if (cloneProjectRequest === undefined || cloneProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'cloneProjectRequest' when calling cloneProject"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/clone",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Clone a Project
   * @param {String} projectOrProductUID
   * @param {module:model/CloneProjectRequest} cloneProjectRequest Project to be cloned
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  cloneProject(projectOrProductUID, cloneProjectRequest) {
    return this.cloneProjectWithHttpInfo(
      projectOrProductUID,
      cloneProjectRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Fleet
   * @param {String} projectOrProductUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  createFleetWithHttpInfo(projectOrProductUID, createFleetRequest) {
    let postBody = createFleetRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling createFleet"
      );
    }
    // verify the required parameter 'createFleetRequest' is set
    if (createFleetRequest === undefined || createFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'createFleetRequest' when calling createFleet"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Fleet
   * @param {String} projectOrProductUID
   * @param {module:model/CreateFleetRequest} createFleetRequest Fleet to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  createFleet(projectOrProductUID, createFleetRequest) {
    return this.createFleetWithHttpInfo(
      projectOrProductUID,
      createFleetRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Product within a Project
   * @param {String} projectOrProductUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
   */
  createProductWithHttpInfo(projectOrProductUID, createProductRequest) {
    let postBody = createProductRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling createProduct"
      );
    }
    // verify the required parameter 'createProductRequest' is set
    if (createProductRequest === undefined || createProductRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProductRequest' when calling createProduct"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/products",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Product within a Project
   * @param {String} projectOrProductUID
   * @param {module:model/CreateProductRequest} createProductRequest Product to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
   */
  createProduct(projectOrProductUID, createProductRequest) {
    return this.createProductWithHttpInfo(
      projectOrProductUID,
      createProductRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  createProjectWithHttpInfo(createProjectRequest) {
    let postBody = createProjectRequest;
    // verify the required parameter 'createProjectRequest' is set
    if (createProjectRequest === undefined || createProjectRequest === null) {
      throw new Error(
        "Missing the required parameter 'createProjectRequest' when calling createProject"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a Project
   * @param {module:model/CreateProjectRequest} createProjectRequest Project to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  createProject(createProjectRequest) {
    return this.createProjectWithHttpInfo(createProjectRequest).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Remove Device from Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/DeleteDeviceFleetsRequest} deleteDeviceFleetsRequest The fleets to remove from the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDeviceFleets200Response} and HTTP response
   */
  deleteDeviceFleetsWithHttpInfo(
    projectOrProductUID,
    deviceUID,
    deleteDeviceFleetsRequest
  ) {
    let postBody = deleteDeviceFleetsRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling deleteDeviceFleets"
      );
    }
    // verify the required parameter 'deleteDeviceFleetsRequest' is set
    if (
      deleteDeviceFleetsRequest === undefined ||
      deleteDeviceFleetsRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'deleteDeviceFleetsRequest' when calling deleteDeviceFleets"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetDeviceFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/devices/{deviceUID}/fleets",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Remove Device from Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/DeleteDeviceFleetsRequest} deleteDeviceFleetsRequest The fleets to remove from the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDeviceFleets200Response}
   */
  deleteDeviceFleets(
    projectOrProductUID,
    deviceUID,
    deleteDeviceFleetsRequest
  ) {
    return this.deleteDeviceFleetsWithHttpInfo(
      projectOrProductUID,
      deviceUID,
      deleteDeviceFleetsRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteFleetWithHttpInfo(projectOrProductUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling deleteFleet"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteFleet(projectOrProductUID, fleetUID) {
    return this.deleteFleetWithHttpInfo(projectOrProductUID, fleetUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Delete environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  deleteFleetEnvironmentVariableWithHttpInfo(
    projectOrProductUID,
    fleetUID,
    key
  ) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteFleetEnvironmentVariable"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling deleteFleetEnvironmentVariable"
      );
    }
    // verify the required parameter 'key' is set
    if (key === undefined || key === null) {
      throw new Error(
        "Missing the required parameter 'key' when calling deleteFleetEnvironmentVariable"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
      key: key,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}/environment_variables/{key}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  deleteFleetEnvironmentVariable(projectOrProductUID, fleetUID, key) {
    return this.deleteFleetEnvironmentVariableWithHttpInfo(
      projectOrProductUID,
      fleetUID,
      key
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteProject"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a Project by ProjectUID
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProject(projectOrProductUID) {
    return this.deleteProjectWithHttpInfo(projectOrProductUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Delete an environment variable of a project by key
   * @param {String} projectOrProductUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  deleteProjectEnvironmentVariableWithHttpInfo(projectOrProductUID, key) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteProjectEnvironmentVariable"
      );
    }
    // verify the required parameter 'key' is set
    if (key === undefined || key === null) {
      throw new Error(
        "Missing the required parameter 'key' when calling deleteProjectEnvironmentVariable"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      key: key,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/environment_variables/{key}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete an environment variable of a project by key
   * @param {String} projectOrProductUID
   * @param {String} key The environment variable key to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  deleteProjectEnvironmentVariable(projectOrProductUID, key) {
    return this.deleteProjectEnvironmentVariableWithHttpInfo(
      projectOrProductUID,
      key
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update/cancel host or notecard firmware updates
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {module:model/String} action
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @param {module:model/DfuActionRequest} opts.dfuActionRequest Which firmware in the case of an update action
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  dfuActionWithHttpInfo(projectOrProductUID, firmwareType, action, opts) {
    opts = opts || {};
    let postBody = opts["dfuActionRequest"];
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling dfuAction"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling dfuAction"
      );
    }
    // verify the required parameter 'action' is set
    if (action === undefined || action === null) {
      throw new Error(
        "Missing the required parameter 'action' when calling dfuAction"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      firmwareType: firmwareType,
      action: action,
    };
    let queryParams = {
      deviceUID: this.apiClient.buildCollectionParam(
        opts["deviceUID"],
        "multi"
      ),
      tag: this.apiClient.buildCollectionParam(opts["tag"], "multi"),
      serialNumber: this.apiClient.buildCollectionParam(
        opts["serialNumber"],
        "multi"
      ),
      fleetUID: opts["fleetUID"],
      notecardFirmware: this.apiClient.buildCollectionParam(
        opts["notecardFirmware"],
        "multi"
      ),
      location: this.apiClient.buildCollectionParam(opts["location"], "multi"),
      hostFirmware: this.apiClient.buildCollectionParam(
        opts["hostFirmware"],
        "multi"
      ),
      productUID: this.apiClient.buildCollectionParam(
        opts["productUID"],
        "multi"
      ),
      sku: this.apiClient.buildCollectionParam(opts["sku"], "multi"),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/dfu/{firmwareType}/{action}",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update/cancel host or notecard firmware updates
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {module:model/String} action
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @param {module:model/DfuActionRequest} opts.dfuActionRequest Which firmware in the case of an update action
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  dfuAction(projectOrProductUID, firmwareType, action, opts) {
    return this.dfuActionWithHttpInfo(
      projectOrProductUID,
      firmwareType,
      action,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  disableGlobalTransformationWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling disableGlobalTransformation"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/global-transformation/disable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Disable the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  disableGlobalTransformation(projectOrProductUID) {
    return this.disableGlobalTransformationWithHttpInfo(
      projectOrProductUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  enableGlobalTransformationWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling enableGlobalTransformation"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/global-transformation/enable",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Enable the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  enableGlobalTransformation(projectOrProductUID) {
    return this.enableGlobalTransformationWithHttpInfo(
      projectOrProductUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get device DFU history for host or Notecard firmware
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/String} firmwareType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceDfuHistory} and HTTP response
   */
  getDeviceDfuHistoryWithHttpInfo(
    projectOrProductUID,
    deviceUID,
    firmwareType
  ) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getDeviceDfuHistory"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDeviceDfuHistory"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling getDeviceDfuHistory"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      deviceUID: deviceUID,
      firmwareType: firmwareType,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = DeviceDfuHistory;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/devices/{deviceUID}/dfu/{firmwareType}/history",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get device DFU history for host or Notecard firmware
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/String} firmwareType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceDfuHistory}
   */
  getDeviceDfuHistory(projectOrProductUID, deviceUID, firmwareType) {
    return this.getDeviceDfuHistoryWithHttpInfo(
      projectOrProductUID,
      deviceUID,
      firmwareType
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get device DFU history for host or Notecard firmware
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/String} firmwareType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceDfuStatus} and HTTP response
   */
  getDeviceDfuStatusWithHttpInfo(projectOrProductUID, deviceUID, firmwareType) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getDeviceDfuStatus"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDeviceDfuStatus"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling getDeviceDfuStatus"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      deviceUID: deviceUID,
      firmwareType: firmwareType,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = DeviceDfuStatus;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/devices/{deviceUID}/dfu/{firmwareType}/status",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get device DFU history for host or Notecard firmware
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/String} firmwareType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceDfuStatus}
   */
  getDeviceDfuStatus(projectOrProductUID, deviceUID, firmwareType) {
    return this.getDeviceDfuStatusWithHttpInfo(
      projectOrProductUID,
      deviceUID,
      firmwareType
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get Device Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDeviceFleets200Response} and HTTP response
   */
  getDeviceFleetsWithHttpInfo(projectOrProductUID, deviceUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDeviceFleets"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetDeviceFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/devices/{deviceUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Device Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDeviceFleets200Response}
   */
  getDeviceFleets(projectOrProductUID, deviceUID) {
    return this.getDeviceFleetsWithHttpInfo(
      projectOrProductUID,
      deviceUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get host or Notecard DFU history for all devices that match the filter criteria
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @param {module:model/String} opts.sortBy  (default to 'captured')
   * @param {module:model/String} opts.sortOrder  (default to 'asc')
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceDfuHistoryPage} and HTTP response
   */
  getDevicesDfuHistoryWithHttpInfo(projectOrProductUID, firmwareType, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getDevicesDfuHistory"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling getDevicesDfuHistory"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      firmwareType: firmwareType,
    };
    let queryParams = {
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
      sortBy: opts["sortBy"],
      sortOrder: opts["sortOrder"],
      deviceUID: this.apiClient.buildCollectionParam(
        opts["deviceUID"],
        "multi"
      ),
      tag: this.apiClient.buildCollectionParam(opts["tag"], "multi"),
      serialNumber: this.apiClient.buildCollectionParam(
        opts["serialNumber"],
        "multi"
      ),
      fleetUID: opts["fleetUID"],
      notecardFirmware: this.apiClient.buildCollectionParam(
        opts["notecardFirmware"],
        "multi"
      ),
      location: this.apiClient.buildCollectionParam(opts["location"], "multi"),
      hostFirmware: this.apiClient.buildCollectionParam(
        opts["hostFirmware"],
        "multi"
      ),
      productUID: this.apiClient.buildCollectionParam(
        opts["productUID"],
        "multi"
      ),
      sku: this.apiClient.buildCollectionParam(opts["sku"], "multi"),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = DeviceDfuHistoryPage;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/dfu/{firmwareType}/history",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get host or Notecard DFU history for all devices that match the filter criteria
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @param {module:model/String} opts.sortBy  (default to 'captured')
   * @param {module:model/String} opts.sortOrder  (default to 'asc')
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceDfuHistoryPage}
   */
  getDevicesDfuHistory(projectOrProductUID, firmwareType, opts) {
    return this.getDevicesDfuHistoryWithHttpInfo(
      projectOrProductUID,
      firmwareType,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get host or Notecard DFU history for all devices that match the filter criteria
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @param {module:model/String} opts.sortBy  (default to 'captured')
   * @param {module:model/String} opts.sortOrder  (default to 'asc')
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceDfuStatusPage} and HTTP response
   */
  getDevicesDfuStatusWithHttpInfo(projectOrProductUID, firmwareType, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getDevicesDfuStatus"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling getDevicesDfuStatus"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      firmwareType: firmwareType,
    };
    let queryParams = {
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
      sortBy: opts["sortBy"],
      sortOrder: opts["sortOrder"],
      deviceUID: this.apiClient.buildCollectionParam(
        opts["deviceUID"],
        "multi"
      ),
      tag: this.apiClient.buildCollectionParam(opts["tag"], "multi"),
      serialNumber: this.apiClient.buildCollectionParam(
        opts["serialNumber"],
        "multi"
      ),
      fleetUID: opts["fleetUID"],
      notecardFirmware: this.apiClient.buildCollectionParam(
        opts["notecardFirmware"],
        "multi"
      ),
      location: this.apiClient.buildCollectionParam(opts["location"], "multi"),
      hostFirmware: this.apiClient.buildCollectionParam(
        opts["hostFirmware"],
        "multi"
      ),
      productUID: this.apiClient.buildCollectionParam(
        opts["productUID"],
        "multi"
      ),
      sku: this.apiClient.buildCollectionParam(opts["sku"], "multi"),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = DeviceDfuStatusPage;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/dfu/{firmwareType}/status",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get host or Notecard DFU history for all devices that match the filter criteria
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @param {module:model/String} opts.sortBy  (default to 'captured')
   * @param {module:model/String} opts.sortOrder  (default to 'asc')
   * @param {Array.<String>} opts.deviceUID A Device UID.
   * @param {Array.<String>} opts.tag Tag filter
   * @param {Array.<String>} opts.serialNumber Serial number filter
   * @param {String} opts.fleetUID
   * @param {Array.<String>} opts.notecardFirmware Firmware version filter
   * @param {Array.<String>} opts.location Location filter
   * @param {Array.<String>} opts.hostFirmware Host firmware filter
   * @param {Array.<String>} opts.productUID
   * @param {Array.<String>} opts.sku SKU filter
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceDfuStatusPage}
   */
  getDevicesDfuStatus(projectOrProductUID, firmwareType, opts) {
    return this.getDevicesDfuStatusWithHttpInfo(
      projectOrProductUID,
      firmwareType,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectOrProductUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.product
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirmwareInfo>} and HTTP response
   */
  getFirmwareInfoWithHttpInfo(projectOrProductUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getFirmwareInfo"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {
      product: opts["product"],
      firmwareType: opts["firmwareType"],
      version: opts["version"],
      target: opts["target"],
      filename: opts["filename"],
      md5: opts["md5"],
      unpublished: opts["unpublished"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [FirmwareInfo];
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/firmware",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Available Firmware Information
   * @param {String} projectOrProductUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.product
   * @param {String} opts.firmwareType
   * @param {String} opts.version
   * @param {String} opts.target
   * @param {String} opts.filename
   * @param {String} opts.md5
   * @param {Boolean} opts.unpublished
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirmwareInfo>}
   */
  getFirmwareInfo(projectOrProductUID, opts) {
    return this.getFirmwareInfoWithHttpInfo(projectOrProductUID, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  getFleetWithHttpInfo(projectOrProductUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling getFleet"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  getFleet(projectOrProductUID, fleetUID) {
    return this.getFleetWithHttpInfo(projectOrProductUID, fleetUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get environment variable hierarchy for a device
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvTreeJsonNode} and HTTP response
   */
  getFleetEnvironmentHierarchyWithHttpInfo(projectOrProductUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getFleetEnvironmentHierarchy"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling getFleetEnvironmentHierarchy"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvTreeJsonNode;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}/environment_hierarchy",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variable hierarchy for a device
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvTreeJsonNode}
   */
  getFleetEnvironmentHierarchy(projectOrProductUID, fleetUID) {
    return this.getFleetEnvironmentHierarchyWithHttpInfo(
      projectOrProductUID,
      fleetUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  getFleetEnvironmentVariablesWithHttpInfo(projectOrProductUID, fleetUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling getFleetEnvironmentVariables"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}/environment_variables",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  getFleetEnvironmentVariables(projectOrProductUID, fleetUID) {
    return this.getFleetEnvironmentVariablesWithHttpInfo(
      projectOrProductUID,
      fleetUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get variable format for a notefile
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NotefileSchema>} and HTTP response
   */
  getNotefileSchemasWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getNotefileSchemas"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [NotefileSchema];
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/schemas",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get variable format for a notefile
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NotefileSchema>}
   */
  getNotefileSchemas(projectOrProductUID) {
    return this.getNotefileSchemasWithHttpInfo(projectOrProductUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProject"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProjectUID
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProject(projectOrProductUID) {
    return this.getProjectWithHttpInfo(projectOrProductUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */
  getProjectByProductWithHttpInfo(productUID) {
    let postBody = null;
    // verify the required parameter 'productUID' is set
    if (productUID === undefined || productUID === null) {
      throw new Error(
        "Missing the required parameter 'productUID' when calling getProjectByProduct"
      );
    }

    let pathParams = {
      productUID: productUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Project;
    return this.apiClient.callApi(
      "/v1/products/{productUID}/project",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a Project by ProductUID
   * @param {String} productUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
   */
  getProjectByProduct(productUID) {
    return this.getProjectByProductWithHttpInfo(productUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get environment variable hierarchy for a device
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvTreeJsonNode} and HTTP response
   */
  getProjectEnvironmentHierarchyWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProjectEnvironmentHierarchy"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvTreeJsonNode;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/environment_hierarchy",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variable hierarchy for a device
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvTreeJsonNode}
   */
  getProjectEnvironmentHierarchy(projectOrProductUID) {
    return this.getProjectEnvironmentHierarchyWithHttpInfo(
      projectOrProductUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get environment variables of a project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  getProjectEnvironmentVariablesWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProjectEnvironmentVariables"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/environment_variables",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get environment variables of a project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  getProjectEnvironmentVariables(projectOrProductUID) {
    return this.getProjectEnvironmentVariablesWithHttpInfo(
      projectOrProductUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get Project Fleets
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDeviceFleets200Response} and HTTP response
   */
  getProjectFleetsWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProjectFleets"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetDeviceFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Fleets
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDeviceFleets200Response}
   */
  getProjectFleets(projectOrProductUID) {
    return this.getProjectFleetsWithHttpInfo(projectOrProductUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Project Members
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectMembers200Response} and HTTP response
   */
  getProjectMembersWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProjectMembers"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectMembers200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/members",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Project Members
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectMembers200Response}
   */
  getProjectMembers(projectOrProductUID) {
    return this.getProjectMembersWithHttpInfo(projectOrProductUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Products within a Project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectProducts200Response} and HTTP response
   */
  getProjectProductsWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getProjectProducts"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectProducts200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/products",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Products within a Project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectProducts200Response}
   */
  getProjectProducts(projectOrProductUID) {
    return this.getProjectProductsWithHttpInfo(projectOrProductUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjects200Response} and HTTP response
   */
  getProjectsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjects200Response;
    return this.apiClient.callApi(
      "/v1/projects",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Projects accessible by the api_key
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjects200Response}
   */
  getProjects() {
    return this.getProjectsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Add Device to Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDeviceFleets200Response} and HTTP response
   */
  putDeviceFleetsWithHttpInfo(
    projectOrProductUID,
    deviceUID,
    putDeviceFleetsRequest
  ) {
    let postBody = putDeviceFleetsRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling putDeviceFleets"
      );
    }
    // verify the required parameter 'putDeviceFleetsRequest' is set
    if (
      putDeviceFleetsRequest === undefined ||
      putDeviceFleetsRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'putDeviceFleetsRequest' when calling putDeviceFleets"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetDeviceFleets200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/devices/{deviceUID}/fleets",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Add Device to Fleets
   * @param {String} projectOrProductUID
   * @param {String} deviceUID
   * @param {module:model/PutDeviceFleetsRequest} putDeviceFleetsRequest The fleets to add to the device. Note that the endpoint takes an array of fleetUIDs, to facilitate multi-fleet devices. Multi-fleet is not yet enabled on all SaaS plans - unless it is supported by the SaaS plan of the project, passing more than a single fleetUID in the array is an error.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDeviceFleets200Response}
   */
  putDeviceFleets(projectOrProductUID, deviceUID, putDeviceFleetsRequest) {
    return this.putDeviceFleetsWithHttpInfo(
      projectOrProductUID,
      deviceUID,
      putDeviceFleetsRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Put environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {module:model/EnvironmentVariables} environmentVariables Environment variables to be added to the fleet
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  putFleetEnvironmentVariablesWithHttpInfo(
    projectOrProductUID,
    fleetUID,
    environmentVariables
  ) {
    let postBody = environmentVariables;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling putFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling putFleetEnvironmentVariables"
      );
    }
    // verify the required parameter 'environmentVariables' is set
    if (environmentVariables === undefined || environmentVariables === null) {
      throw new Error(
        "Missing the required parameter 'environmentVariables' when calling putFleetEnvironmentVariables"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}/environment_variables",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Put environment variables of a fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {module:model/EnvironmentVariables} environmentVariables Environment variables to be added to the fleet
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  putFleetEnvironmentVariables(
    projectOrProductUID,
    fleetUID,
    environmentVariables
  ) {
    return this.putFleetEnvironmentVariablesWithHttpInfo(
      projectOrProductUID,
      fleetUID,
      environmentVariables
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Put environment variables of a project
   * @param {String} projectOrProductUID
   * @param {Object} opts Optional parameters
   * @param {module:model/EnvironmentVariables} opts.environmentVariables
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentVariables} and HTTP response
   */
  putProjectEnvironmentVariablesWithHttpInfo(projectOrProductUID, opts) {
    opts = opts || {};
    let postBody = opts["environmentVariables"];
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling putProjectEnvironmentVariables"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = EnvironmentVariables;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/environment_variables",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Put environment variables of a project
   * @param {String} projectOrProductUID
   * @param {Object} opts Optional parameters
   * @param {module:model/EnvironmentVariables} opts.environmentVariables
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentVariables}
   */
  putProjectEnvironmentVariables(projectOrProductUID, opts) {
    return this.putProjectEnvironmentVariablesWithHttpInfo(
      projectOrProductUID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setGlobalTransformationWithHttpInfo(projectOrProductUID, body) {
    let postBody = body;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling setGlobalTransformation"
      );
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling setGlobalTransformation"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/global-transformation",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Set the project-level event JSONata transformation
   * @param {String} projectOrProductUID
   * @param {Object.<String, Object>} body JSONata expression which will be applied to each event before it is persisted and routed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setGlobalTransformation(projectOrProductUID, body) {
    return this.setGlobalTransformationWithHttpInfo(
      projectOrProductUID,
      body
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Fleet} and HTTP response
   */
  updateFleetWithHttpInfo(projectOrProductUID, fleetUID, updateFleetRequest) {
    let postBody = updateFleetRequest;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling updateFleet"
      );
    }
    // verify the required parameter 'updateFleetRequest' is set
    if (updateFleetRequest === undefined || updateFleetRequest === null) {
      throw new Error(
        "Missing the required parameter 'updateFleetRequest' when calling updateFleet"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      fleetUID: fleetUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Fleet;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/fleets/{fleetUID}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Fleet
   * @param {String} projectOrProductUID
   * @param {String} fleetUID
   * @param {module:model/UpdateFleetRequest} updateFleetRequest Fleet details to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Fleet}
   */
  updateFleet(projectOrProductUID, fleetUID, updateFleetRequest) {
    return this.updateFleetWithHttpInfo(
      projectOrProductUID,
      fleetUID,
      updateFleetRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Upload firmware binary
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {String} filename
   * @param {File} body contents of the firmware binary
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirmwareInfo} and HTTP response
   */
  uploadFirmwareWithHttpInfo(
    projectOrProductUID,
    firmwareType,
    filename,
    body
  ) {
    let postBody = body;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling uploadFirmware"
      );
    }
    // verify the required parameter 'firmwareType' is set
    if (firmwareType === undefined || firmwareType === null) {
      throw new Error(
        "Missing the required parameter 'firmwareType' when calling uploadFirmware"
      );
    }
    // verify the required parameter 'filename' is set
    if (filename === undefined || filename === null) {
      throw new Error(
        "Missing the required parameter 'filename' when calling uploadFirmware"
      );
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling uploadFirmware"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      firmwareType: firmwareType,
      filename: filename,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/octet-stream"];
    let accepts = ["application/json"];
    let returnType = FirmwareInfo;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/firmware/{firmwareType}/{filename}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Upload firmware binary
   * @param {String} projectOrProductUID
   * @param {module:model/String} firmwareType
   * @param {String} filename
   * @param {File} body contents of the firmware binary
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirmwareInfo}
   */
  uploadFirmware(projectOrProductUID, firmwareType, filename, body) {
    return this.uploadFirmwareWithHttpInfo(
      projectOrProductUID,
      firmwareType,
      filename,
      body
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
