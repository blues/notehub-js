/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Device from "../model/Device";
import Error from "../model/Error";
import GetProjectDevicePublicKeys200Response from "../model/GetProjectDevicePublicKeys200Response";
import GetProjectDevices200Response from "../model/GetProjectDevices200Response";
import HandleNoteChanges200Response from "../model/HandleNoteChanges200Response";
import HandleNoteGet200Response from "../model/HandleNoteGet200Response";
import HandleNotefileChanges200Response from "../model/HandleNotefileChanges200Response";
import HandleNotefileChangesPending200Response from "../model/HandleNotefileChangesPending200Response";
import HandleNotefileDeleteRequest from "../model/HandleNotefileDeleteRequest";
import Note from "../model/Note";
import PostProvisionProjectDeviceRequest from "../model/PostProvisionProjectDeviceRequest";

/**
 * Devices service.
 * @module api/DevicesApi
 * @version 1.0.19
 */
export default class DevicesApi {
  /**
   * Constructs a new DevicesApi.
   * @alias module:api/DevicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Delete Device
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/String} purge
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectDeviceWithHttpInfo(projectUID, deviceUID, purge) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling deleteProjectDevice"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling deleteProjectDevice"
      );
    }
    // verify the required parameter 'purge' is set
    if (purge === undefined || purge === null) {
      throw new Error(
        "Missing the required parameter 'purge' when calling deleteProjectDevice"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {
      purge: purge,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Device
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/String} purge
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProjectDevice(projectUID, deviceUID, purge) {
    return this.deleteProjectDeviceWithHttpInfo(
      projectUID,
      deviceUID,
      purge
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get Device
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Device} and HTTP response
   */
  getDeviceWithHttpInfo(projectUID, deviceUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getDevice"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling getDevice"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Device;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Device
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Device}
   */
  getDevice(projectUID, deviceUID) {
    return this.getDeviceWithHttpInfo(projectUID, deviceUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Device Public Keys of a Project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectDevicePublicKeys200Response} and HTTP response
   */
  getProjectDevicePublicKeysWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectDevicePublicKeys"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectDevicePublicKeys200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/public-keys",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Device Public Keys of a Project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectDevicePublicKeys200Response}
   */
  getProjectDevicePublicKeys(projectUID, opts) {
    return this.getProjectDevicePublicKeysWithHttpInfo(projectUID, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get Devices of a Project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectDevices200Response} and HTTP response
   */
  getProjectDevicesWithHttpInfo(projectUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectDevices"
      );
    }

    let pathParams = {
      projectUID: projectUID,
    };
    let queryParams = {
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectDevices200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Devices of a Project
   * @param {String} projectUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectDevices200Response}
   */
  getProjectDevices(projectUID, opts) {
    return this.getProjectDevicesWithHttpInfo(projectUID, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get Devices of a Fleet within a Project
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectDevices200Response} and HTTP response
   */
  getProjectFleetDevicesWithHttpInfo(projectUID, fleetUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling getProjectFleetDevices"
      );
    }
    // verify the required parameter 'fleetUID' is set
    if (fleetUID === undefined || fleetUID === null) {
      throw new Error(
        "Missing the required parameter 'fleetUID' when calling getProjectFleetDevices"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      fleetUID: fleetUID,
    };
    let queryParams = {
      pageSize: opts["pageSize"],
      pageNum: opts["pageNum"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetProjectDevices200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/fleets/{fleetUID}/devices",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get Devices of a Fleet within a Project
   * @param {String} projectUID
   * @param {String} fleetUID
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize  (default to 50)
   * @param {Number} opts.pageNum  (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectDevices200Response}
   */
  getProjectFleetDevices(projectUID, fleetUID, opts) {
    return this.getProjectFleetDevicesWithHttpInfo(
      projectUID,
      fleetUID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Adds a Note to a Notefile, creating the Notefile if it doesn't yet exist.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  handleNoteAddWithHttpInfo(projectUID, deviceUID, notefileID, note) {
    let postBody = note;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteAdd"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteAdd"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteAdd"
      );
    }
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error(
        "Missing the required parameter 'note' when calling handleNoteAdd"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Adds a Note to a Notefile, creating the Notefile if it doesn't yet exist.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  handleNoteAdd(projectUID, deviceUID, notefileID, note) {
    return this.handleNoteAddWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      note
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Incrementally retrieve changes within a specific Notefile.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {Object} opts Optional parameters
   * @param {String} opts.tracker The change tracker ID.
   * @param {Number} opts.max The maximum number of Notes to return in the request.
   * @param {Boolean} opts.start true to reset the tracker to the beginning.
   * @param {Boolean} opts.stop true to delete the tracker.
   * @param {Boolean} opts.deleted true to return deleted notes.
   * @param {Boolean} opts._delete true to delete the notes returned by the request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HandleNoteChanges200Response} and HTTP response
   */
  handleNoteChangesWithHttpInfo(projectUID, deviceUID, notefileID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteChanges"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteChanges"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteChanges"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
    };
    let queryParams = {
      tracker: opts["tracker"],
      max: opts["max"],
      start: opts["start"],
      stop: opts["stop"],
      deleted: opts["deleted"],
      delete: opts["_delete"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = HandleNoteChanges200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}/changes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Incrementally retrieve changes within a specific Notefile.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {Object} opts Optional parameters
   * @param {String} opts.tracker The change tracker ID.
   * @param {Number} opts.max The maximum number of Notes to return in the request.
   * @param {Boolean} opts.start true to reset the tracker to the beginning.
   * @param {Boolean} opts.stop true to delete the tracker.
   * @param {Boolean} opts.deleted true to return deleted notes.
   * @param {Boolean} opts._delete true to delete the notes returned by the request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HandleNoteChanges200Response}
   */
  handleNoteChanges(projectUID, deviceUID, notefileID, opts) {
    return this.handleNoteChangesWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Adds a Note to a Notefile, creating the Notefile if it doesn't yet exist.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  handleNoteCreateAddWithHttpInfo(
    projectUID,
    deviceUID,
    notefileID,
    noteID,
    note
  ) {
    let postBody = note;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteCreateAdd"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteCreateAdd"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteCreateAdd"
      );
    }
    // verify the required parameter 'noteID' is set
    if (noteID === undefined || noteID === null) {
      throw new Error(
        "Missing the required parameter 'noteID' when calling handleNoteCreateAdd"
      );
    }
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error(
        "Missing the required parameter 'note' when calling handleNoteCreateAdd"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
      noteID: noteID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}/{noteID}",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Adds a Note to a Notefile, creating the Notefile if it doesn't yet exist.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  handleNoteCreateAdd(projectUID, deviceUID, notefileID, noteID, note) {
    return this.handleNoteCreateAddWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      noteID,
      note
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a note from a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  handleNoteDeleteWithHttpInfo(projectUID, deviceUID, notefileID, noteID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteDelete"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteDelete"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteDelete"
      );
    }
    // verify the required parameter 'noteID' is set
    if (noteID === undefined || noteID === null) {
      throw new Error(
        "Missing the required parameter 'noteID' when calling handleNoteDelete"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
      noteID: noteID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}/{noteID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a note from a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  handleNoteDelete(projectUID, deviceUID, notefileID, noteID) {
    return this.handleNoteDeleteWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      noteID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get a note from a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts._delete Whether to delete the note from the DB notefile
   * @param {Boolean} opts.deleted Whether to return deleted notes
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HandleNoteGet200Response} and HTTP response
   */
  handleNoteGetWithHttpInfo(projectUID, deviceUID, notefileID, noteID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteGet"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteGet"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteGet"
      );
    }
    // verify the required parameter 'noteID' is set
    if (noteID === undefined || noteID === null) {
      throw new Error(
        "Missing the required parameter 'noteID' when calling handleNoteGet"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
      noteID: noteID,
    };
    let queryParams = {
      delete: opts["_delete"],
      deleted: opts["deleted"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = HandleNoteGet200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}/{noteID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a note from a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts._delete Whether to delete the note from the DB notefile
   * @param {Boolean} opts.deleted Whether to return deleted notes
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HandleNoteGet200Response}
   */
  handleNoteGet(projectUID, deviceUID, notefileID, noteID, opts) {
    return this.handleNoteGetWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      noteID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a note in a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  handleNoteUpdateWithHttpInfo(
    projectUID,
    deviceUID,
    notefileID,
    noteID,
    note
  ) {
    let postBody = note;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNoteUpdate"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNoteUpdate"
      );
    }
    // verify the required parameter 'notefileID' is set
    if (notefileID === undefined || notefileID === null) {
      throw new Error(
        "Missing the required parameter 'notefileID' when calling handleNoteUpdate"
      );
    }
    // verify the required parameter 'noteID' is set
    if (noteID === undefined || noteID === null) {
      throw new Error(
        "Missing the required parameter 'noteID' when calling handleNoteUpdate"
      );
    }
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error(
        "Missing the required parameter 'note' when calling handleNoteUpdate"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
      notefileID: notefileID,
      noteID: noteID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/notes/{notefileID}/{noteID}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a note in a DB notefile
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {String} notefileID
   * @param {String} noteID
   * @param {module:model/Note} note Body or payload of note to be added to the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  handleNoteUpdate(projectUID, deviceUID, notefileID, noteID, note) {
    return this.handleNoteUpdateWithHttpInfo(
      projectUID,
      deviceUID,
      notefileID,
      noteID,
      note
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Used to perform queries on a single or multiple files to determine if new Notes are available to read
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.tracker The change tracker ID.
   * @param {Array.<String>} opts.files One or more files to obtain change information from.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HandleNotefileChanges200Response} and HTTP response
   */
  handleNotefileChangesWithHttpInfo(projectUID, deviceUID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNotefileChanges"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNotefileChanges"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {
      tracker: opts["tracker"],
      files: this.apiClient.buildCollectionParam(opts["files"], "multi"),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = HandleNotefileChanges200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/files/changes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Used to perform queries on a single or multiple files to determine if new Notes are available to read
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {Object} opts Optional parameters
   * @param {String} opts.tracker The change tracker ID.
   * @param {Array.<String>} opts.files One or more files to obtain change information from.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HandleNotefileChanges200Response}
   */
  handleNotefileChanges(projectUID, deviceUID, opts) {
    return this.handleNotefileChangesWithHttpInfo(
      projectUID,
      deviceUID,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Returns info about file changes that are pending upload to Notehub or download to the Notecard.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HandleNotefileChangesPending200Response} and HTTP response
   */
  handleNotefileChangesPendingWithHttpInfo(projectUID, deviceUID) {
    let postBody = null;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNotefileChangesPending"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNotefileChangesPending"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = HandleNotefileChangesPending200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/files/changes/pending",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Returns info about file changes that are pending upload to Notehub or download to the Notecard.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HandleNotefileChangesPending200Response}
   */
  handleNotefileChangesPending(projectUID, deviceUID) {
    return this.handleNotefileChangesPendingWithHttpInfo(
      projectUID,
      deviceUID
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Deletes Notefiles and the Notes they contain.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/HandleNotefileDeleteRequest} handleNotefileDeleteRequest
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  handleNotefileDeleteWithHttpInfo(
    projectUID,
    deviceUID,
    handleNotefileDeleteRequest
  ) {
    let postBody = handleNotefileDeleteRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling handleNotefileDelete"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling handleNotefileDelete"
      );
    }
    // verify the required parameter 'handleNotefileDeleteRequest' is set
    if (
      handleNotefileDeleteRequest === undefined ||
      handleNotefileDeleteRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'handleNotefileDeleteRequest' when calling handleNotefileDelete"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/files",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Deletes Notefiles and the Notes they contain.
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/HandleNotefileDeleteRequest} handleNotefileDeleteRequest
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  handleNotefileDelete(projectUID, deviceUID, handleNotefileDeleteRequest) {
    return this.handleNotefileDeleteWithHttpInfo(
      projectUID,
      deviceUID,
      handleNotefileDeleteRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Provision Device for a Project
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PostProvisionProjectDeviceRequest} postProvisionProjectDeviceRequest Provision a device to a specific ProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  postProvisionProjectDeviceWithHttpInfo(
    projectUID,
    deviceUID,
    postProvisionProjectDeviceRequest
  ) {
    let postBody = postProvisionProjectDeviceRequest;
    // verify the required parameter 'projectUID' is set
    if (projectUID === undefined || projectUID === null) {
      throw new Error(
        "Missing the required parameter 'projectUID' when calling postProvisionProjectDevice"
      );
    }
    // verify the required parameter 'deviceUID' is set
    if (deviceUID === undefined || deviceUID === null) {
      throw new Error(
        "Missing the required parameter 'deviceUID' when calling postProvisionProjectDevice"
      );
    }
    // verify the required parameter 'postProvisionProjectDeviceRequest' is set
    if (
      postProvisionProjectDeviceRequest === undefined ||
      postProvisionProjectDeviceRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'postProvisionProjectDeviceRequest' when calling postProvisionProjectDevice"
      );
    }

    let pathParams = {
      projectUID: projectUID,
      deviceUID: deviceUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Object;
    return this.apiClient.callApi(
      "/v1/projects/{projectUID}/devices/{deviceUID}/provision",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Provision Device for a Project
   * @param {String} projectUID
   * @param {String} deviceUID
   * @param {module:model/PostProvisionProjectDeviceRequest} postProvisionProjectDeviceRequest Provision a device to a specific ProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */
  postProvisionProjectDevice(
    projectUID,
    deviceUID,
    postProvisionProjectDeviceRequest
  ) {
    return this.postProvisionProjectDeviceWithHttpInfo(
      projectUID,
      deviceUID,
      postProvisionProjectDeviceRequest
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
