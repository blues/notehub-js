/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Error from "../model/Error";
import GetWebhooks200Response from "../model/GetWebhooks200Response";
import WebhookSettings from "../model/WebhookSettings";

/**
 * Webhook service.
 * @module api/WebhookApi
 * @version 1.0.36
 */
export default class WebhookApi {
  /**
   * Constructs a new WebhookApi.
   * @alias module:api/WebhookApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Creates a webhook for the specified product with the given name. The name | must be unique within the project.
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @param {module:model/WebhookSettings} webhookSettings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  createWebhookWithHttpInfo(projectOrProductUID, webhookUID, webhookSettings) {
    let postBody = webhookSettings;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling createWebhook"
      );
    }
    // verify the required parameter 'webhookUID' is set
    if (webhookUID === undefined || webhookUID === null) {
      throw new Error(
        "Missing the required parameter 'webhookUID' when calling createWebhook"
      );
    }
    // verify the required parameter 'webhookSettings' is set
    if (webhookSettings === undefined || webhookSettings === null) {
      throw new Error(
        "Missing the required parameter 'webhookSettings' when calling createWebhook"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      webhookUID: webhookUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/webhooks/{webhookUID}",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Creates a webhook for the specified product with the given name. The name | must be unique within the project.
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @param {module:model/WebhookSettings} webhookSettings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  createWebhook(projectOrProductUID, webhookUID, webhookSettings) {
    return this.createWebhookWithHttpInfo(
      projectOrProductUID,
      webhookUID,
      webhookSettings
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Deletes the specified webhook
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteWebhookWithHttpInfo(projectOrProductUID, webhookUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling deleteWebhook"
      );
    }
    // verify the required parameter 'webhookUID' is set
    if (webhookUID === undefined || webhookUID === null) {
      throw new Error(
        "Missing the required parameter 'webhookUID' when calling deleteWebhook"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      webhookUID: webhookUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/webhooks/{webhookUID}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Deletes the specified webhook
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteWebhook(projectOrProductUID, webhookUID) {
    return this.deleteWebhookWithHttpInfo(projectOrProductUID, webhookUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Retrieves the configuration settings for the specified webhook
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookSettings} and HTTP response
   */
  getWebhookWithHttpInfo(projectOrProductUID, webhookUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getWebhook"
      );
    }
    // verify the required parameter 'webhookUID' is set
    if (webhookUID === undefined || webhookUID === null) {
      throw new Error(
        "Missing the required parameter 'webhookUID' when calling getWebhook"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      webhookUID: webhookUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = WebhookSettings;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/webhooks/{webhookUID}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Retrieves the configuration settings for the specified webhook
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookSettings}
   */
  getWebhook(projectOrProductUID, webhookUID) {
    return this.getWebhookWithHttpInfo(projectOrProductUID, webhookUID).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Retrieves all webhooks for the specified project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWebhooks200Response} and HTTP response
   */
  getWebhooksWithHttpInfo(projectOrProductUID) {
    let postBody = null;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling getWebhooks"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetWebhooks200Response;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/webhooks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Retrieves all webhooks for the specified project
   * @param {String} projectOrProductUID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWebhooks200Response}
   */
  getWebhooks(projectOrProductUID) {
    return this.getWebhooksWithHttpInfo(projectOrProductUID).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Updates the configuration settings for the specified webhook. | Webhook will be created if it does not exist. Update body will completely replace the existing settings.
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @param {module:model/WebhookSettings} webhookSettings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  updateWebhookWithHttpInfo(projectOrProductUID, webhookUID, webhookSettings) {
    let postBody = webhookSettings;
    // verify the required parameter 'projectOrProductUID' is set
    if (projectOrProductUID === undefined || projectOrProductUID === null) {
      throw new Error(
        "Missing the required parameter 'projectOrProductUID' when calling updateWebhook"
      );
    }
    // verify the required parameter 'webhookUID' is set
    if (webhookUID === undefined || webhookUID === null) {
      throw new Error(
        "Missing the required parameter 'webhookUID' when calling updateWebhook"
      );
    }
    // verify the required parameter 'webhookSettings' is set
    if (webhookSettings === undefined || webhookSettings === null) {
      throw new Error(
        "Missing the required parameter 'webhookSettings' when calling updateWebhook"
      );
    }

    let pathParams = {
      projectOrProductUID: projectOrProductUID,
      webhookUID: webhookUID,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["api_key"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/v1/projects/{projectOrProductUID}/webhooks/{webhookUID}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Updates the configuration settings for the specified webhook. | Webhook will be created if it does not exist. Update body will completely replace the existing settings.
   * @param {String} projectOrProductUID
   * @param {String} webhookUID Webhook UID
   * @param {module:model/WebhookSettings} webhookSettings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  updateWebhook(projectOrProductUID, webhookUID, webhookSettings) {
    return this.updateWebhookWithHttpInfo(
      projectOrProductUID,
      webhookUID,
      webhookSettings
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
