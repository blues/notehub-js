/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Filter model module.
 * @module model/Filter
 * @version 2.2.1
 */
class Filter {
  /**
   * Constructs a new <code>Filter</code>.
   * Filter applied to route data. Controls which notefiles are sent through the route.
   * @alias module:model/Filter
   */
  constructor() {
    Filter.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Filter} obj Optional instance to populate.
   * @return {module:model/Filter} The populated <code>Filter</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Filter();

      if (data.hasOwnProperty("files")) {
        obj["files"] = ApiClient.convertToType(data["files"], ["String"]);
      }
      if (data.hasOwnProperty("system_notefiles")) {
        obj["system_notefiles"] = ApiClient.convertToType(
          data["system_notefiles"],
          "Boolean"
        );
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Filter</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
   */
  static validateJSON(data) {
    // ensure the json data is an array
    if (!Array.isArray(data["files"])) {
      throw new Error(
        "Expected the field `files` to be an array in the JSON data but got " +
          data["files"]
      );
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }

    return true;
  }
}

/**
 * List of notefile names or patterns to filter on.
 * @member {Array.<String>} files
 */
Filter.prototype["files"] = undefined;

/**
 * Whether system notefiles should be included.
 * @member {Boolean} system_notefiles
 */
Filter.prototype["system_notefiles"] = undefined;

/**
 * Type of filter to apply (corresponds to `hublib.NotefileFilterType`).
 * @member {String} type
 */
Filter.prototype["type"] = undefined;

export default Filter;
