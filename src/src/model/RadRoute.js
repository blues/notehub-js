/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The RadRoute model module.
 * @module model/RadRoute
 * @version 2.3.0
 */
class RadRoute {
  /**
   * Constructs a new <code>RadRoute</code>.
   * @alias module:model/RadRoute
   */
  constructor() {
    RadRoute.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>RadRoute</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RadRoute} obj Optional instance to populate.
   * @return {module:model/RadRoute} The populated <code>RadRoute</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RadRoute();

      if (data.hasOwnProperty("client_id")) {
        obj["client_id"] = ApiClient.convertToType(data["client_id"], "String");
      }
      if (data.hasOwnProperty("client_secret")) {
        obj["client_secret"] = ApiClient.convertToType(
          data["client_secret"],
          "String"
        );
      }
      if (data.hasOwnProperty("data_feed_key")) {
        obj["data_feed_key"] = ApiClient.convertToType(
          data["data_feed_key"],
          "String"
        );
      }
      if (data.hasOwnProperty("event_id")) {
        obj["event_id"] = ApiClient.convertToType(data["event_id"], "Number");
      }
      if (data.hasOwnProperty("fleets")) {
        obj["fleets"] = ApiClient.convertToType(data["fleets"], ["String"]);
      }
      if (data.hasOwnProperty("test_api")) {
        obj["test_api"] = ApiClient.convertToType(data["test_api"], "Boolean");
      }
      if (data.hasOwnProperty("throttle_ms")) {
        obj["throttle_ms"] = ApiClient.convertToType(
          data["throttle_ms"],
          "Number"
        );
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>RadRoute</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RadRoute</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["client_id"] &&
      !(
        typeof data["client_id"] === "string" ||
        data["client_id"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `client_id` to be a primitive type in the JSON string but got " +
          data["client_id"]
      );
    }
    // ensure the json data is a string
    if (
      data["client_secret"] &&
      !(
        typeof data["client_secret"] === "string" ||
        data["client_secret"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `client_secret` to be a primitive type in the JSON string but got " +
          data["client_secret"]
      );
    }
    // ensure the json data is a string
    if (
      data["data_feed_key"] &&
      !(
        typeof data["data_feed_key"] === "string" ||
        data["data_feed_key"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `data_feed_key` to be a primitive type in the JSON string but got " +
          data["data_feed_key"]
      );
    }
    // ensure the json data is an array
    if (!Array.isArray(data["fleets"])) {
      throw new Error(
        "Expected the field `fleets` to be an array in the JSON data but got " +
          data["fleets"]
      );
    }

    return true;
  }
}

/**
 * @member {String} client_id
 */
RadRoute.prototype["client_id"] = undefined;

/**
 * @member {String} client_secret
 */
RadRoute.prototype["client_secret"] = undefined;

/**
 * @member {String} data_feed_key
 */
RadRoute.prototype["data_feed_key"] = undefined;

/**
 * @member {Number} event_id
 */
RadRoute.prototype["event_id"] = undefined;

/**
 * @member {Array.<String>} fleets
 */
RadRoute.prototype["fleets"] = undefined;

/**
 * @member {Boolean} test_api
 */
RadRoute.prototype["test_api"] = undefined;

/**
 * @member {Number} throttle_ms
 */
RadRoute.prototype["throttle_ms"] = undefined;

export default RadRoute;
