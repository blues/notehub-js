/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Contact from "./Contact";
import DFUEnv from "./DFUEnv";
import DeviceTowerInfo from "./DeviceTowerInfo";
import Location from "./Location";
import SimUsage from "./SimUsage";

/**
 * The Device model module.
 * @module model/Device
 * @version 2.2.1
 */
class Device {
  /**
   * Constructs a new <code>Device</code>.
   * @alias module:model/Device
   * @param fleetUids {Array.<String>}
   * @param productUid {String}
   * @param provisioned {Date}
   * @param temperature {Number}
   * @param uid {String}
   * @param voltage {Number}
   */
  constructor(fleetUids, productUid, provisioned, temperature, uid, voltage) {
    Device.initialize(
      this,
      fleetUids,
      productUid,
      provisioned,
      temperature,
      uid,
      voltage
    );
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(
    obj,
    fleetUids,
    productUid,
    provisioned,
    temperature,
    uid,
    voltage
  ) {
    obj["fleet_uids"] = fleetUids;
    obj["product_uid"] = productUid;
    obj["provisioned"] = provisioned;
    obj["temperature"] = temperature;
    obj["uid"] = uid;
    obj["voltage"] = voltage;
  }

  /**
   * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Device} obj Optional instance to populate.
   * @return {module:model/Device} The populated <code>Device</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Device();

      if (data.hasOwnProperty("cellular_usage")) {
        obj["cellular_usage"] = ApiClient.convertToType(
          data["cellular_usage"],
          [SimUsage]
        );
      }
      if (data.hasOwnProperty("contact")) {
        obj["contact"] = Contact.constructFromObject(data["contact"]);
      }
      if (data.hasOwnProperty("dfu")) {
        obj["dfu"] = DFUEnv.constructFromObject(data["dfu"]);
      }
      if (data.hasOwnProperty("disabled")) {
        obj["disabled"] = ApiClient.convertToType(data["disabled"], "Boolean");
      }
      if (data.hasOwnProperty("firmware_host")) {
        obj["firmware_host"] = ApiClient.convertToType(
          data["firmware_host"],
          "String"
        );
      }
      if (data.hasOwnProperty("firmware_notecard")) {
        obj["firmware_notecard"] = ApiClient.convertToType(
          data["firmware_notecard"],
          "String"
        );
      }
      if (data.hasOwnProperty("fleet_uids")) {
        obj["fleet_uids"] = ApiClient.convertToType(data["fleet_uids"], [
          "String",
        ]);
      }
      if (data.hasOwnProperty("gps_location")) {
        obj["gps_location"] = Location.constructFromObject(
          data["gps_location"]
        );
      }
      if (data.hasOwnProperty("last_activity")) {
        obj["last_activity"] = ApiClient.convertToType(
          data["last_activity"],
          "Date"
        );
      }
      if (data.hasOwnProperty("product_uid")) {
        obj["product_uid"] = ApiClient.convertToType(
          data["product_uid"],
          "String"
        );
      }
      if (data.hasOwnProperty("provisioned")) {
        obj["provisioned"] = ApiClient.convertToType(
          data["provisioned"],
          "Date"
        );
      }
      if (data.hasOwnProperty("serial_number")) {
        obj["serial_number"] = ApiClient.convertToType(
          data["serial_number"],
          "String"
        );
      }
      if (data.hasOwnProperty("sku")) {
        obj["sku"] = ApiClient.convertToType(data["sku"], "String");
      }
      if (data.hasOwnProperty("temperature")) {
        obj["temperature"] = ApiClient.convertToType(
          data["temperature"],
          "Number"
        );
      }
      if (data.hasOwnProperty("tower_info")) {
        obj["tower_info"] = DeviceTowerInfo.constructFromObject(
          data["tower_info"]
        );
      }
      if (data.hasOwnProperty("tower_location")) {
        obj["tower_location"] = Location.constructFromObject(
          data["tower_location"]
        );
      }
      if (data.hasOwnProperty("triangulated_location")) {
        obj["triangulated_location"] = Location.constructFromObject(
          data["triangulated_location"]
        );
      }
      if (data.hasOwnProperty("uid")) {
        obj["uid"] = ApiClient.convertToType(data["uid"], "String");
      }
      if (data.hasOwnProperty("voltage")) {
        obj["voltage"] = ApiClient.convertToType(data["voltage"], "Number");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Device</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of Device.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    if (data["cellular_usage"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["cellular_usage"])) {
        throw new Error(
          "Expected the field `cellular_usage` to be an array in the JSON data but got " +
            data["cellular_usage"]
        );
      }
      // validate the optional field `cellular_usage` (array)
      for (const item of data["cellular_usage"]) {
        SimUsage.validateJsonObject(item);
      }
    }
    // validate the optional field `contact`
    if (data["contact"]) {
      // data not null
      Contact.validateJSON(data["contact"]);
    }
    // validate the optional field `dfu`
    if (data["dfu"]) {
      // data not null
      DFUEnv.validateJSON(data["dfu"]);
    }
    // ensure the json data is a string
    if (
      data["firmware_host"] &&
      !(
        typeof data["firmware_host"] === "string" ||
        data["firmware_host"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `firmware_host` to be a primitive type in the JSON string but got " +
          data["firmware_host"]
      );
    }
    // ensure the json data is a string
    if (
      data["firmware_notecard"] &&
      !(
        typeof data["firmware_notecard"] === "string" ||
        data["firmware_notecard"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `firmware_notecard` to be a primitive type in the JSON string but got " +
          data["firmware_notecard"]
      );
    }
    // ensure the json data is an array
    if (!Array.isArray(data["fleet_uids"])) {
      throw new Error(
        "Expected the field `fleet_uids` to be an array in the JSON data but got " +
          data["fleet_uids"]
      );
    }
    // validate the optional field `gps_location`
    if (data["gps_location"]) {
      // data not null
      Location.validateJSON(data["gps_location"]);
    }
    // ensure the json data is a string
    if (
      data["product_uid"] &&
      !(
        typeof data["product_uid"] === "string" ||
        data["product_uid"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `product_uid` to be a primitive type in the JSON string but got " +
          data["product_uid"]
      );
    }
    // ensure the json data is a string
    if (
      data["serial_number"] &&
      !(
        typeof data["serial_number"] === "string" ||
        data["serial_number"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `serial_number` to be a primitive type in the JSON string but got " +
          data["serial_number"]
      );
    }
    // ensure the json data is a string
    if (
      data["sku"] &&
      !(typeof data["sku"] === "string" || data["sku"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `sku` to be a primitive type in the JSON string but got " +
          data["sku"]
      );
    }
    // validate the optional field `tower_info`
    if (data["tower_info"]) {
      // data not null
      DeviceTowerInfo.validateJSON(data["tower_info"]);
    }
    // validate the optional field `tower_location`
    if (data["tower_location"]) {
      // data not null
      Location.validateJSON(data["tower_location"]);
    }
    // validate the optional field `triangulated_location`
    if (data["triangulated_location"]) {
      // data not null
      Location.validateJSON(data["triangulated_location"]);
    }
    // ensure the json data is a string
    if (
      data["uid"] &&
      !(typeof data["uid"] === "string" || data["uid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `uid` to be a primitive type in the JSON string but got " +
          data["uid"]
      );
    }

    return true;
  }
}

Device.RequiredProperties = [
  "fleet_uids",
  "product_uid",
  "provisioned",
  "temperature",
  "uid",
  "voltage",
];

/**
 * @member {Array.<module:model/SimUsage>} cellular_usage
 */
Device.prototype["cellular_usage"] = undefined;

/**
 * @member {module:model/Contact} contact
 */
Device.prototype["contact"] = undefined;

/**
 * @member {module:model/DFUEnv} dfu
 */
Device.prototype["dfu"] = undefined;

/**
 * @member {Boolean} disabled
 */
Device.prototype["disabled"] = undefined;

/**
 * @member {String} firmware_host
 */
Device.prototype["firmware_host"] = undefined;

/**
 * @member {String} firmware_notecard
 */
Device.prototype["firmware_notecard"] = undefined;

/**
 * @member {Array.<String>} fleet_uids
 */
Device.prototype["fleet_uids"] = undefined;

/**
 * @member {module:model/Location} gps_location
 */
Device.prototype["gps_location"] = undefined;

/**
 * @member {Date} last_activity
 */
Device.prototype["last_activity"] = undefined;

/**
 * @member {String} product_uid
 */
Device.prototype["product_uid"] = undefined;

/**
 * @member {Date} provisioned
 */
Device.prototype["provisioned"] = undefined;

/**
 * @member {String} serial_number
 */
Device.prototype["serial_number"] = undefined;

/**
 * @member {String} sku
 */
Device.prototype["sku"] = undefined;

/**
 * @member {Number} temperature
 */
Device.prototype["temperature"] = undefined;

/**
 * @member {module:model/DeviceTowerInfo} tower_info
 */
Device.prototype["tower_info"] = undefined;

/**
 * @member {module:model/Location} tower_location
 */
Device.prototype["tower_location"] = undefined;

/**
 * @member {module:model/Location} triangulated_location
 */
Device.prototype["triangulated_location"] = undefined;

/**
 * @member {String} uid
 */
Device.prototype["uid"] = undefined;

/**
 * @member {Number} voltage
 */
Device.prototype["voltage"] = undefined;

export default Device;
