/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Repository model module.
 * @module model/Repository
 * @version 2.0.0
 */
class Repository {
  /**
   * Constructs a new <code>Repository</code>.
   * @alias module:model/Repository
   */
  constructor() {
    Repository.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Repository} obj Optional instance to populate.
   * @return {module:model/Repository} The populated <code>Repository</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Repository();

      if (data.hasOwnProperty("fleet_uids")) {
        obj["fleet_uids"] = ApiClient.convertToType(data["fleet_uids"], [
          "String",
        ]);
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("project_uids")) {
        obj["project_uids"] = ApiClient.convertToType(data["project_uids"], [
          "String",
        ]);
      }
      if (data.hasOwnProperty("uid")) {
        obj["uid"] = ApiClient.convertToType(data["uid"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Repository</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
   */
  static validateJSON(data) {
    // ensure the json data is an array
    if (!Array.isArray(data["fleet_uids"])) {
      throw new Error(
        "Expected the field `fleet_uids` to be an array in the JSON data but got " +
          data["fleet_uids"]
      );
    }
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }
    // ensure the json data is an array
    if (!Array.isArray(data["project_uids"])) {
      throw new Error(
        "Expected the field `project_uids` to be an array in the JSON data but got " +
          data["project_uids"]
      );
    }
    // ensure the json data is a string
    if (
      data["uid"] &&
      !(typeof data["uid"] === "string" || data["uid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `uid` to be a primitive type in the JSON string but got " +
          data["uid"]
      );
    }

    return true;
  }
}

/**
 * @member {Array.<String>} fleet_uids
 */
Repository.prototype["fleet_uids"] = undefined;

/**
 * repository name
 * @member {String} name
 */
Repository.prototype["name"] = undefined;

/**
 * @member {Array.<String>} project_uids
 */
Repository.prototype["project_uids"] = undefined;

/**
 * The unique identifier for the data repository
 * @member {String} uid
 */
Repository.prototype["uid"] = undefined;

export default Repository;
