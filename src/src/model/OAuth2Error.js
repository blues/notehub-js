/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The OAuth2Error model module.
 * @module model/OAuth2Error
 * @version 2.2.1
 */
class OAuth2Error {
  /**
   * Constructs a new <code>OAuth2Error</code>.
   * @alias module:model/OAuth2Error
   * @param error {module:model/OAuth2Error.ErrorEnum} RFC 6749 error code.
   */
  constructor(error) {
    OAuth2Error.initialize(this, error);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, error) {
    obj["error"] = error;
  }

  /**
   * Constructs a <code>OAuth2Error</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OAuth2Error} obj Optional instance to populate.
   * @return {module:model/OAuth2Error} The populated <code>OAuth2Error</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new OAuth2Error();

      if (data.hasOwnProperty("error")) {
        obj["error"] = ApiClient.convertToType(data["error"], "String");
      }
      if (data.hasOwnProperty("error_description")) {
        obj["error_description"] = ApiClient.convertToType(
          data["error_description"],
          "String"
        );
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>OAuth2Error</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuth2Error</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of OAuth2Error.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    // ensure the json data is a string
    if (
      data["error"] &&
      !(typeof data["error"] === "string" || data["error"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `error` to be a primitive type in the JSON string but got " +
          data["error"]
      );
    }
    // ensure the json data is a string
    if (
      data["error_description"] &&
      !(
        typeof data["error_description"] === "string" ||
        data["error_description"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `error_description` to be a primitive type in the JSON string but got " +
          data["error_description"]
      );
    }

    return true;
  }
}

OAuth2Error.RequiredProperties = ["error"];

/**
 * RFC 6749 error code.
 * @member {module:model/OAuth2Error.ErrorEnum} error
 */
OAuth2Error.prototype["error"] = undefined;

/**
 * Human-readable explanation of the error.
 * @member {String} error_description
 */
OAuth2Error.prototype["error_description"] = undefined;

/**
 * Allowed values for the <code>error</code> property.
 * @enum {String}
 * @readonly
 */
OAuth2Error["ErrorEnum"] = {
  /**
   * value: "invalid_request"
   * @const
   */
  invalid_request: "invalid_request",

  /**
   * value: "invalid_client"
   * @const
   */
  invalid_client: "invalid_client",

  /**
   * value: "invalid_grant"
   * @const
   */
  invalid_grant: "invalid_grant",

  /**
   * value: "unauthorized_client"
   * @const
   */
  unauthorized_client: "unauthorized_client",

  /**
   * value: "unsupported_grant_type"
   * @const
   */
  unsupported_grant_type: "unsupported_grant_type",

  /**
   * value: "invalid_scope"
   * @const
   */
  invalid_scope: "invalid_scope",
};

export default OAuth2Error;
