/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DataSetField from "./DataSetField";

/**
 * The DataSet model module.
 * @module model/DataSet
 * @version 1.0.32
 */
class DataSet {
  /**
   * Constructs a new <code>DataSet</code>.
   * @alias module:model/DataSet
   */
  constructor() {
    DataSet.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>DataSet</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DataSet} obj Optional instance to populate.
   * @return {module:model/DataSet} The populated <code>DataSet</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DataSet();

      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("time")) {
        obj["time"] = ApiClient.convertToType(data["time"], "String");
      }
      if (data.hasOwnProperty("lat")) {
        obj["lat"] = ApiClient.convertToType(data["lat"], "String");
      }
      if (data.hasOwnProperty("lon")) {
        obj["lon"] = ApiClient.convertToType(data["lon"], "String");
      }
      if (data.hasOwnProperty("fields")) {
        obj["fields"] = ApiClient.convertToType(data["fields"], [DataSetField]);
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DataSet</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSet</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }
    // ensure the json data is a string
    if (
      data["time"] &&
      !(typeof data["time"] === "string" || data["time"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `time` to be a primitive type in the JSON string but got " +
          data["time"]
      );
    }
    // ensure the json data is a string
    if (
      data["lat"] &&
      !(typeof data["lat"] === "string" || data["lat"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `lat` to be a primitive type in the JSON string but got " +
          data["lat"]
      );
    }
    // ensure the json data is a string
    if (
      data["lon"] &&
      !(typeof data["lon"] === "string" || data["lon"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `lon` to be a primitive type in the JSON string but got " +
          data["lon"]
      );
    }
    if (data["fields"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["fields"])) {
        throw new Error(
          "Expected the field `fields` to be an array in the JSON data but got " +
            data["fields"]
        );
      }
      // validate the optional field `fields` (array)
      for (const item of data["fields"]) {
        DataSetField.validateJsonObject(item);
      }
    }

    return true;
  }
}

/**
 * The name of the data set
 * @member {String} name
 */
DataSet.prototype["name"] = undefined;

/**
 * JSONata expression resulting in the relevant time field
 * @member {String} time
 */
DataSet.prototype["time"] = undefined;

/**
 * JSONata expression resulting in the latitude field
 * @member {String} lat
 */
DataSet.prototype["lat"] = undefined;

/**
 * JSONata expression resulting in the Longitude field
 * @member {String} lon
 */
DataSet.prototype["lon"] = undefined;

/**
 * @member {Array.<module:model/DataSetField>} fields
 */
DataSet.prototype["fields"] = undefined;

export default DataSet;
