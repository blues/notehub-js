/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import FirmwareStatus from "./FirmwareStatus";

/**
 * The OTAStatus model module.
 * @module model/OTAStatus
 * @version 1.0.20
 */
class OTAStatus {
  /**
   * Constructs a new <code>OTAStatus</code>.
   * @alias module:model/OTAStatus
   */
  constructor() {
    OTAStatus.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>OTAStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OTAStatus} obj Optional instance to populate.
   * @return {module:model/OTAStatus} The populated <code>OTAStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new OTAStatus();

      if (data.hasOwnProperty("device_uid")) {
        obj["device_uid"] = ApiClient.convertToType(
          data["device_uid"],
          "String"
        );
      }
      if (data.hasOwnProperty("tags")) {
        obj["tags"] = ApiClient.convertToType(data["tags"], "String");
      }
      if (data.hasOwnProperty("notecard_current_firmware")) {
        obj["notecard_current_firmware"] = FirmwareStatus.constructFromObject(
          data["notecard_current_firmware"]
        );
      }
      if (data.hasOwnProperty("notecard_dfu_began_at")) {
        obj["notecard_dfu_began_at"] = ApiClient.convertToType(
          data["notecard_dfu_began_at"],
          "String"
        );
      }
      if (data.hasOwnProperty("notecard_dfu_status")) {
        obj["notecard_dfu_status"] = ApiClient.convertToType(
          data["notecard_dfu_status"],
          "String"
        );
      }
      if (data.hasOwnProperty("notecard_requested_firmware")) {
        obj["notecard_requested_firmware"] = FirmwareStatus.constructFromObject(
          data["notecard_requested_firmware"]
        );
      }
      if (data.hasOwnProperty("notecard_requested_at")) {
        obj["notecard_requested_at"] = ApiClient.convertToType(
          data["notecard_requested_at"],
          "String"
        );
      }
      if (data.hasOwnProperty("notecard_requested_scope")) {
        obj["notecard_requested_scope"] = ApiClient.convertToType(
          data["notecard_requested_scope"],
          "String"
        );
      }
      if (data.hasOwnProperty("notecard_requested_show_details")) {
        obj["notecard_requested_show_details"] = ApiClient.convertToType(
          data["notecard_requested_show_details"],
          "Boolean"
        );
      }
      if (data.hasOwnProperty("notecard_requested_status")) {
        obj["notecard_requested_status"] = ApiClient.convertToType(
          data["notecard_requested_status"],
          "String"
        );
      }
      if (data.hasOwnProperty("host_current_firmware")) {
        obj["host_current_firmware"] = FirmwareStatus.constructFromObject(
          data["host_current_firmware"]
        );
      }
      if (data.hasOwnProperty("host_dfu_began_at")) {
        obj["host_dfu_began_at"] = ApiClient.convertToType(
          data["host_dfu_began_at"],
          "String"
        );
      }
      if (data.hasOwnProperty("host_dfu_status")) {
        obj["host_dfu_status"] = ApiClient.convertToType(
          data["host_dfu_status"],
          "String"
        );
      }
      if (data.hasOwnProperty("host_requested_firmware")) {
        obj["host_requested_firmware"] = FirmwareStatus.constructFromObject(
          data["host_requested_firmware"]
        );
      }
      if (data.hasOwnProperty("host_requested_at")) {
        obj["host_requested_at"] = ApiClient.convertToType(
          data["host_requested_at"],
          "String"
        );
      }
      if (data.hasOwnProperty("host_requested_scope")) {
        obj["host_requested_scope"] = ApiClient.convertToType(
          data["host_requested_scope"],
          "String"
        );
      }
      if (data.hasOwnProperty("host_requested_show_details")) {
        obj["host_requested_show_details"] = ApiClient.convertToType(
          data["host_requested_show_details"],
          "Boolean"
        );
      }
      if (data.hasOwnProperty("host_requested_status")) {
        obj["host_requested_status"] = ApiClient.convertToType(
          data["host_requested_status"],
          "String"
        );
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>OTAStatus</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OTAStatus</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["device_uid"] &&
      !(
        typeof data["device_uid"] === "string" ||
        data["device_uid"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `device_uid` to be a primitive type in the JSON string but got " +
          data["device_uid"]
      );
    }
    // ensure the json data is a string
    if (
      data["tags"] &&
      !(typeof data["tags"] === "string" || data["tags"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `tags` to be a primitive type in the JSON string but got " +
          data["tags"]
      );
    }
    // validate the optional field `notecard_current_firmware`
    if (data["notecard_current_firmware"]) {
      // data not null
      FirmwareStatus.validateJSON(data["notecard_current_firmware"]);
    }
    // ensure the json data is a string
    if (
      data["notecard_dfu_began_at"] &&
      !(
        typeof data["notecard_dfu_began_at"] === "string" ||
        data["notecard_dfu_began_at"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `notecard_dfu_began_at` to be a primitive type in the JSON string but got " +
          data["notecard_dfu_began_at"]
      );
    }
    // ensure the json data is a string
    if (
      data["notecard_dfu_status"] &&
      !(
        typeof data["notecard_dfu_status"] === "string" ||
        data["notecard_dfu_status"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `notecard_dfu_status` to be a primitive type in the JSON string but got " +
          data["notecard_dfu_status"]
      );
    }
    // validate the optional field `notecard_requested_firmware`
    if (data["notecard_requested_firmware"]) {
      // data not null
      FirmwareStatus.validateJSON(data["notecard_requested_firmware"]);
    }
    // ensure the json data is a string
    if (
      data["notecard_requested_at"] &&
      !(
        typeof data["notecard_requested_at"] === "string" ||
        data["notecard_requested_at"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `notecard_requested_at` to be a primitive type in the JSON string but got " +
          data["notecard_requested_at"]
      );
    }
    // ensure the json data is a string
    if (
      data["notecard_requested_scope"] &&
      !(
        typeof data["notecard_requested_scope"] === "string" ||
        data["notecard_requested_scope"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `notecard_requested_scope` to be a primitive type in the JSON string but got " +
          data["notecard_requested_scope"]
      );
    }
    // ensure the json data is a string
    if (
      data["notecard_requested_status"] &&
      !(
        typeof data["notecard_requested_status"] === "string" ||
        data["notecard_requested_status"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `notecard_requested_status` to be a primitive type in the JSON string but got " +
          data["notecard_requested_status"]
      );
    }
    // validate the optional field `host_current_firmware`
    if (data["host_current_firmware"]) {
      // data not null
      FirmwareStatus.validateJSON(data["host_current_firmware"]);
    }
    // ensure the json data is a string
    if (
      data["host_dfu_began_at"] &&
      !(
        typeof data["host_dfu_began_at"] === "string" ||
        data["host_dfu_began_at"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `host_dfu_began_at` to be a primitive type in the JSON string but got " +
          data["host_dfu_began_at"]
      );
    }
    // ensure the json data is a string
    if (
      data["host_dfu_status"] &&
      !(
        typeof data["host_dfu_status"] === "string" ||
        data["host_dfu_status"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `host_dfu_status` to be a primitive type in the JSON string but got " +
          data["host_dfu_status"]
      );
    }
    // validate the optional field `host_requested_firmware`
    if (data["host_requested_firmware"]) {
      // data not null
      FirmwareStatus.validateJSON(data["host_requested_firmware"]);
    }
    // ensure the json data is a string
    if (
      data["host_requested_at"] &&
      !(
        typeof data["host_requested_at"] === "string" ||
        data["host_requested_at"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `host_requested_at` to be a primitive type in the JSON string but got " +
          data["host_requested_at"]
      );
    }
    // ensure the json data is a string
    if (
      data["host_requested_scope"] &&
      !(
        typeof data["host_requested_scope"] === "string" ||
        data["host_requested_scope"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `host_requested_scope` to be a primitive type in the JSON string but got " +
          data["host_requested_scope"]
      );
    }
    // ensure the json data is a string
    if (
      data["host_requested_status"] &&
      !(
        typeof data["host_requested_status"] === "string" ||
        data["host_requested_status"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `host_requested_status` to be a primitive type in the JSON string but got " +
          data["host_requested_status"]
      );
    }

    return true;
  }
}

/**
 * The device UID
 * @member {String} device_uid
 */
OTAStatus.prototype["device_uid"] = undefined;

/**
 * The tags associated with the device
 * @member {String} tags
 */
OTAStatus.prototype["tags"] = undefined;

/**
 * @member {module:model/FirmwareStatus} notecard_current_firmware
 */
OTAStatus.prototype["notecard_current_firmware"] = undefined;

/**
 * The time the Notecard DFU began
 * @member {String} notecard_dfu_began_at
 */
OTAStatus.prototype["notecard_dfu_began_at"] = undefined;

/**
 * The status of the Notecard DFU
 * @member {String} notecard_dfu_status
 */
OTAStatus.prototype["notecard_dfu_status"] = undefined;

/**
 * @member {module:model/FirmwareStatus} notecard_requested_firmware
 */
OTAStatus.prototype["notecard_requested_firmware"] = undefined;

/**
 * The time the Notecard firmware was requested
 * @member {String} notecard_requested_at
 */
OTAStatus.prototype["notecard_requested_at"] = undefined;

/**
 * The scope of the Notecard firmware request
 * @member {String} notecard_requested_scope
 */
OTAStatus.prototype["notecard_requested_scope"] = undefined;

/**
 * Whether to show details of the Notecard firmware request
 * @member {Boolean} notecard_requested_show_details
 */
OTAStatus.prototype["notecard_requested_show_details"] = undefined;

/**
 * The status of the Notecard firmware request
 * @member {String} notecard_requested_status
 */
OTAStatus.prototype["notecard_requested_status"] = undefined;

/**
 * @member {module:model/FirmwareStatus} host_current_firmware
 */
OTAStatus.prototype["host_current_firmware"] = undefined;

/**
 * The time the host DFU began
 * @member {String} host_dfu_began_at
 */
OTAStatus.prototype["host_dfu_began_at"] = undefined;

/**
 * The status of the host DFU
 * @member {String} host_dfu_status
 */
OTAStatus.prototype["host_dfu_status"] = undefined;

/**
 * @member {module:model/FirmwareStatus} host_requested_firmware
 */
OTAStatus.prototype["host_requested_firmware"] = undefined;

/**
 * The time the host firmware was requested
 * @member {String} host_requested_at
 */
OTAStatus.prototype["host_requested_at"] = undefined;

/**
 * The scope of the host firmware request
 * @member {String} host_requested_scope
 */
OTAStatus.prototype["host_requested_scope"] = undefined;

/**
 * Whether to show details of the host firmware request
 * @member {Boolean} host_requested_show_details
 */
OTAStatus.prototype["host_requested_show_details"] = undefined;

/**
 * The status of the host firmware request
 * @member {String} host_requested_status
 */
OTAStatus.prototype["host_requested_status"] = undefined;

export default OTAStatus;
