/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The FirmwareInfo model module.
 * @module model/FirmwareInfo
 * @version 2.1.0
 */
class FirmwareInfo {
  /**
   * Constructs a new <code>FirmwareInfo</code>.
   * @alias module:model/FirmwareInfo
   */
  constructor() {
    FirmwareInfo.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>FirmwareInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FirmwareInfo} obj Optional instance to populate.
   * @return {module:model/FirmwareInfo} The populated <code>FirmwareInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FirmwareInfo();

      if (data.hasOwnProperty("built")) {
        obj["built"] = ApiClient.convertToType(data["built"], "String");
      }
      if (data.hasOwnProperty("created")) {
        obj["created"] = ApiClient.convertToType(data["created"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(
          data["description"],
          "String"
        );
      }
      if (data.hasOwnProperty("filename")) {
        obj["filename"] = ApiClient.convertToType(data["filename"], "String");
      }
      if (data.hasOwnProperty("md5")) {
        obj["md5"] = ApiClient.convertToType(data["md5"], "String");
      }
      if (data.hasOwnProperty("organization")) {
        obj["organization"] = ApiClient.convertToType(
          data["organization"],
          "String"
        );
      }
      if (data.hasOwnProperty("product")) {
        obj["product"] = ApiClient.convertToType(data["product"], "String");
      }
      if (data.hasOwnProperty("published")) {
        obj["published"] = ApiClient.convertToType(
          data["published"],
          "Boolean"
        );
      }
      if (data.hasOwnProperty("tags")) {
        obj["tags"] = ApiClient.convertToType(data["tags"], "String");
      }
      if (data.hasOwnProperty("target")) {
        obj["target"] = ApiClient.convertToType(data["target"], "String");
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
      if (data.hasOwnProperty("version")) {
        obj["version"] = ApiClient.convertToType(data["version"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FirmwareInfo</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirmwareInfo</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["built"] &&
      !(typeof data["built"] === "string" || data["built"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `built` to be a primitive type in the JSON string but got " +
          data["built"]
      );
    }
    // ensure the json data is a string
    if (
      data["created"] &&
      !(
        typeof data["created"] === "string" || data["created"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `created` to be a primitive type in the JSON string but got " +
          data["created"]
      );
    }
    // ensure the json data is a string
    if (
      data["description"] &&
      !(
        typeof data["description"] === "string" ||
        data["description"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `description` to be a primitive type in the JSON string but got " +
          data["description"]
      );
    }
    // ensure the json data is a string
    if (
      data["filename"] &&
      !(
        typeof data["filename"] === "string" ||
        data["filename"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `filename` to be a primitive type in the JSON string but got " +
          data["filename"]
      );
    }
    // ensure the json data is a string
    if (
      data["md5"] &&
      !(typeof data["md5"] === "string" || data["md5"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `md5` to be a primitive type in the JSON string but got " +
          data["md5"]
      );
    }
    // ensure the json data is a string
    if (
      data["organization"] &&
      !(
        typeof data["organization"] === "string" ||
        data["organization"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `organization` to be a primitive type in the JSON string but got " +
          data["organization"]
      );
    }
    // ensure the json data is a string
    if (
      data["product"] &&
      !(
        typeof data["product"] === "string" || data["product"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `product` to be a primitive type in the JSON string but got " +
          data["product"]
      );
    }
    // ensure the json data is a string
    if (
      data["tags"] &&
      !(typeof data["tags"] === "string" || data["tags"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `tags` to be a primitive type in the JSON string but got " +
          data["tags"]
      );
    }
    // ensure the json data is a string
    if (
      data["target"] &&
      !(typeof data["target"] === "string" || data["target"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `target` to be a primitive type in the JSON string but got " +
          data["target"]
      );
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }
    // ensure the json data is a string
    if (
      data["version"] &&
      !(
        typeof data["version"] === "string" || data["version"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `version` to be a primitive type in the JSON string but got " +
          data["version"]
      );
    }

    return true;
  }
}

/**
 * The date the firmware was built.
 * @member {String} built
 */
FirmwareInfo.prototype["built"] = undefined;

/**
 * The date the firmware was created.
 * @member {String} created
 */
FirmwareInfo.prototype["created"] = undefined;

/**
 * A description of the firmware.
 * @member {String} description
 */
FirmwareInfo.prototype["description"] = undefined;

/**
 * The name of the firmware file.
 * @member {String} filename
 */
FirmwareInfo.prototype["filename"] = undefined;

/**
 * The MD5 hash of the firmware file.
 * @member {String} md5
 */
FirmwareInfo.prototype["md5"] = undefined;

/**
 * The organization that owns the firmware.
 * @member {String} organization
 */
FirmwareInfo.prototype["organization"] = undefined;

/**
 * The product that the firmware is for.
 * @member {String} product
 */
FirmwareInfo.prototype["product"] = undefined;

/**
 * True if the firmware is published.
 * @member {Boolean} published
 */
FirmwareInfo.prototype["published"] = undefined;

/**
 * A list of tags associated with the firmware.
 * @member {String} tags
 */
FirmwareInfo.prototype["tags"] = undefined;

/**
 * The target device for the firmware.
 * @member {String} target
 */
FirmwareInfo.prototype["target"] = undefined;

/**
 * The type of firmware.
 * @member {String} type
 */
FirmwareInfo.prototype["type"] = undefined;

/**
 * The version of the firmware.
 * @member {String} version
 */
FirmwareInfo.prototype["version"] = undefined;

export default FirmwareInfo;
