/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The DataSetField model module.
 * @module model/DataSetField
 * @version 2.2.0
 */
class DataSetField {
  /**
   * Constructs a new <code>DataSetField</code>.
   * @alias module:model/DataSetField
   */
  constructor() {
    DataSetField.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>DataSetField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DataSetField} obj Optional instance to populate.
   * @return {module:model/DataSetField} The populated <code>DataSetField</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DataSetField();

      if (data.hasOwnProperty("datatype")) {
        obj["datatype"] = ApiClient.convertToType(data["datatype"], "Number");
      }
      if (data.hasOwnProperty("jsonata")) {
        obj["jsonata"] = ApiClient.convertToType(data["jsonata"], "String");
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DataSetField</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSetField</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["jsonata"] &&
      !(
        typeof data["jsonata"] === "string" || data["jsonata"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `jsonata` to be a primitive type in the JSON string but got " +
          data["jsonata"]
      );
    }
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }

    return true;
  }
}

/**
 * The datatype of the field
 * @member {module:model/DataSetField.DatatypeEnum} datatype
 */
DataSetField.prototype["datatype"] = undefined;

/**
 * the JSONata expression used to populate this field
 * @member {String} jsonata
 */
DataSetField.prototype["jsonata"] = undefined;

/**
 * The name of the field
 * @member {String} name
 */
DataSetField.prototype["name"] = undefined;

/**
 * Allowed values for the <code>datatype</code> property.
 * @enum {Number}
 * @readonly
 */
DataSetField["DatatypeEnum"] = {
  /**
   * value: 0
   * @const
   */
  0: 0,

  /**
   * value: 1
   * @const
   */
  1: 1,

  /**
   * value: 2
   * @const
   */
  2: 2,
};

export default DataSetField;
