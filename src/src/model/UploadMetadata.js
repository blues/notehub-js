/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Firmware from "./Firmware";

/**
 * The UploadMetadata model module.
 * @module model/UploadMetadata
 * @version 1.0.35
 */
class UploadMetadata {
  /**
   * Constructs a new <code>UploadMetadata</code>.
   * @alias module:model/UploadMetadata
   */
  constructor() {
    UploadMetadata.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>UploadMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UploadMetadata} obj Optional instance to populate.
   * @return {module:model/UploadMetadata} The populated <code>UploadMetadata</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UploadMetadata();

      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("length")) {
        obj["length"] = ApiClient.convertToType(data["length"], "Number");
      }
      if (data.hasOwnProperty("md5")) {
        obj["md5"] = ApiClient.convertToType(data["md5"], "String");
      }
      if (data.hasOwnProperty("crc32")) {
        obj["crc32"] = ApiClient.convertToType(data["crc32"], "Number");
      }
      if (data.hasOwnProperty("created")) {
        obj["created"] = ApiClient.convertToType(data["created"], "Number");
      }
      if (data.hasOwnProperty("modified")) {
        obj["modified"] = ApiClient.convertToType(data["modified"], "Number");
      }
      if (data.hasOwnProperty("source")) {
        obj["source"] = ApiClient.convertToType(data["source"], "String");
      }
      if (data.hasOwnProperty("contains")) {
        obj["contains"] = ApiClient.convertToType(data["contains"], "String");
      }
      if (data.hasOwnProperty("found")) {
        obj["found"] = ApiClient.convertToType(data["found"], "String");
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
      if (data.hasOwnProperty("tags")) {
        obj["tags"] = ApiClient.convertToType(data["tags"], "String");
      }
      if (data.hasOwnProperty("notes")) {
        obj["notes"] = ApiClient.convertToType(data["notes"], "String");
      }
      if (data.hasOwnProperty("firmware")) {
        obj["firmware"] = Firmware.constructFromObject(data["firmware"]);
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>UploadMetadata</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadMetadata</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }
    // ensure the json data is a string
    if (
      data["md5"] &&
      !(typeof data["md5"] === "string" || data["md5"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `md5` to be a primitive type in the JSON string but got " +
          data["md5"]
      );
    }
    // ensure the json data is a string
    if (
      data["source"] &&
      !(typeof data["source"] === "string" || data["source"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `source` to be a primitive type in the JSON string but got " +
          data["source"]
      );
    }
    // ensure the json data is a string
    if (
      data["contains"] &&
      !(
        typeof data["contains"] === "string" ||
        data["contains"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `contains` to be a primitive type in the JSON string but got " +
          data["contains"]
      );
    }
    // ensure the json data is a string
    if (
      data["found"] &&
      !(typeof data["found"] === "string" || data["found"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `found` to be a primitive type in the JSON string but got " +
          data["found"]
      );
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }
    // ensure the json data is a string
    if (
      data["tags"] &&
      !(typeof data["tags"] === "string" || data["tags"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `tags` to be a primitive type in the JSON string but got " +
          data["tags"]
      );
    }
    // ensure the json data is a string
    if (
      data["notes"] &&
      !(typeof data["notes"] === "string" || data["notes"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `notes` to be a primitive type in the JSON string but got " +
          data["notes"]
      );
    }
    // validate the optional field `firmware`
    if (data["firmware"]) {
      // data not null
      Firmware.validateJSON(data["firmware"]);
    }

    return true;
  }
}

/**
 * @member {String} name
 */
UploadMetadata.prototype["name"] = undefined;

/**
 * @member {Number} length
 */
UploadMetadata.prototype["length"] = undefined;

/**
 * @member {String} md5
 */
UploadMetadata.prototype["md5"] = undefined;

/**
 * @member {Number} crc32
 */
UploadMetadata.prototype["crc32"] = undefined;

/**
 * @member {Number} created
 */
UploadMetadata.prototype["created"] = undefined;

/**
 * @member {Number} modified
 */
UploadMetadata.prototype["modified"] = undefined;

/**
 * @member {String} source
 */
UploadMetadata.prototype["source"] = undefined;

/**
 * @member {String} contains
 */
UploadMetadata.prototype["contains"] = undefined;

/**
 * @member {String} found
 */
UploadMetadata.prototype["found"] = undefined;

/**
 * @member {String} type
 */
UploadMetadata.prototype["type"] = undefined;

/**
 * @member {String} tags
 */
UploadMetadata.prototype["tags"] = undefined;

/**
 * @member {String} notes
 */
UploadMetadata.prototype["notes"] = undefined;

/**
 * @member {module:model/Firmware} firmware
 */
UploadMetadata.prototype["firmware"] = undefined;

export default UploadMetadata;
