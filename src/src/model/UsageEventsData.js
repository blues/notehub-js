/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The UsageEventsData model module.
 * @module model/UsageEventsData
 * @version 2.0.0
 */
class UsageEventsData {
  /**
   * Constructs a new <code>UsageEventsData</code>.
   * @alias module:model/UsageEventsData
   * @param device {String}
   * @param period {Date}
   * @param platformEvents {Number}
   * @param totalEvents {Number}
   */
  constructor(device, period, platformEvents, totalEvents) {
    UsageEventsData.initialize(
      this,
      device,
      period,
      platformEvents,
      totalEvents
    );
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, device, period, platformEvents, totalEvents) {
    obj["device"] = device;
    obj["period"] = period;
    obj["platform_events"] = platformEvents;
    obj["total_events"] = totalEvents;
  }

  /**
   * Constructs a <code>UsageEventsData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UsageEventsData} obj Optional instance to populate.
   * @return {module:model/UsageEventsData} The populated <code>UsageEventsData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UsageEventsData();

      if (data.hasOwnProperty("device")) {
        obj["device"] = ApiClient.convertToType(data["device"], "String");
      }
      if (data.hasOwnProperty("period")) {
        obj["period"] = ApiClient.convertToType(data["period"], "Date");
      }
      if (data.hasOwnProperty("platform_events")) {
        obj["platform_events"] = ApiClient.convertToType(
          data["platform_events"],
          "Number"
        );
      }
      if (data.hasOwnProperty("total_events")) {
        obj["total_events"] = ApiClient.convertToType(
          data["total_events"],
          "Number"
        );
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>UsageEventsData</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageEventsData</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of UsageEventsData.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    // ensure the json data is a string
    if (
      data["device"] &&
      !(typeof data["device"] === "string" || data["device"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `device` to be a primitive type in the JSON string but got " +
          data["device"]
      );
    }

    return true;
  }
}

UsageEventsData.RequiredProperties = [
  "device",
  "period",
  "platform_events",
  "total_events",
];

/**
 * @member {String} device
 */
UsageEventsData.prototype["device"] = undefined;

/**
 * @member {Date} period
 */
UsageEventsData.prototype["period"] = undefined;

/**
 * @member {Number} platform_events
 */
UsageEventsData.prototype["platform_events"] = undefined;

/**
 * @member {Number} total_events
 */
UsageEventsData.prototype["total_events"] = undefined;

export default UsageEventsData;
