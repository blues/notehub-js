/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The SchemaProperty model module.
 * @module model/SchemaProperty
 * @version 1.0.34
 */
class SchemaProperty {
  /**
   * Constructs a new <code>SchemaProperty</code>.
   * @alias module:model/SchemaProperty
   * @param type {module:model/SchemaProperty.TypeEnum}
   * @param updatedAt {Date}
   */
  constructor(type, updatedAt) {
    SchemaProperty.initialize(this, type, updatedAt);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, type, updatedAt) {
    obj["type"] = type;
    obj["updatedAt"] = updatedAt;
  }

  /**
   * Constructs a <code>SchemaProperty</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SchemaProperty} obj Optional instance to populate.
   * @return {module:model/SchemaProperty} The populated <code>SchemaProperty</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SchemaProperty();

      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
      if (data.hasOwnProperty("updatedAt")) {
        obj["updatedAt"] = ApiClient.convertToType(data["updatedAt"], "Date");
      }
      if (data.hasOwnProperty("items")) {
        obj["items"] = ApiClient.convertToType(data["items"], [SchemaProperty]);
      }
      if (data.hasOwnProperty("properties")) {
        obj["properties"] = ApiClient.convertToType(data["properties"], [
          SchemaProperty,
        ]);
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>SchemaProperty</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaProperty</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of SchemaProperty.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }
    if (data["items"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["items"])) {
        throw new Error(
          "Expected the field `items` to be an array in the JSON data but got " +
            data["items"]
        );
      }
      // validate the optional field `items` (array)
      for (const item of data["items"]) {
        SchemaProperty.validateJsonObject(item);
      }
    }
    if (data["properties"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["properties"])) {
        throw new Error(
          "Expected the field `properties` to be an array in the JSON data but got " +
            data["properties"]
        );
      }
      // validate the optional field `properties` (array)
      for (const item of data["properties"]) {
        SchemaProperty.validateJsonObject(item);
      }
    }

    return true;
  }
}

SchemaProperty.RequiredProperties = ["type", "updatedAt"];

/**
 * Name of the field (optional for array/object children)
 * @member {String} name
 */
SchemaProperty.prototype["name"] = undefined;

/**
 * @member {module:model/SchemaProperty.TypeEnum} type
 */
SchemaProperty.prototype["type"] = undefined;

/**
 * @member {Date} updatedAt
 */
SchemaProperty.prototype["updatedAt"] = undefined;

/**
 * Used if type is array
 * @member {Array.<module:model/SchemaProperty>} items
 */
SchemaProperty.prototype["items"] = undefined;

/**
 * Used if type is object
 * @member {Array.<module:model/SchemaProperty>} properties
 */
SchemaProperty.prototype["properties"] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SchemaProperty["TypeEnum"] = {
  /**
   * value: "string"
   * @const
   */
  string: "string",

  /**
   * value: "number"
   * @const
   */
  number: "number",

  /**
   * value: "boolean"
   * @const
   */
  boolean: "boolean",

  /**
   * value: "array"
   * @const
   */
  array: "array",

  /**
   * value: "object"
   * @const
   */
  object: "object",
};

export default SchemaProperty;
