/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Filter from "./Filter";
import RouteTransformSettings from "./RouteTransformSettings";

/**
 * The S3ArchiveRoute model module.
 * @module model/S3ArchiveRoute
 * @version 2.2.0
 */
class S3ArchiveRoute {
  /**
   * Constructs a new <code>S3ArchiveRoute</code>.
   * @alias module:model/S3ArchiveRoute
   */
  constructor() {
    S3ArchiveRoute.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>S3ArchiveRoute</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/S3ArchiveRoute} obj Optional instance to populate.
   * @return {module:model/S3ArchiveRoute} The populated <code>S3ArchiveRoute</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new S3ArchiveRoute();

      if (data.hasOwnProperty("archive_count_exceeds")) {
        obj["archive_count_exceeds"] = ApiClient.convertToType(
          data["archive_count_exceeds"],
          "Number"
        );
      }
      if (data.hasOwnProperty("archive_every_mins")) {
        obj["archive_every_mins"] = ApiClient.convertToType(
          data["archive_every_mins"],
          "Number"
        );
      }
      if (data.hasOwnProperty("archive_id")) {
        obj["archive_id"] = ApiClient.convertToType(
          data["archive_id"],
          "String"
        );
      }
      if (data.hasOwnProperty("bucket_endpoint")) {
        obj["bucket_endpoint"] = ApiClient.convertToType(
          data["bucket_endpoint"],
          "String"
        );
      }
      if (data.hasOwnProperty("bucket_name")) {
        obj["bucket_name"] = ApiClient.convertToType(
          data["bucket_name"],
          "String"
        );
      }
      if (data.hasOwnProperty("bucket_region")) {
        obj["bucket_region"] = ApiClient.convertToType(
          data["bucket_region"],
          "String"
        );
      }
      if (data.hasOwnProperty("file_access")) {
        obj["file_access"] = ApiClient.convertToType(
          data["file_access"],
          "String"
        );
      }
      if (data.hasOwnProperty("file_folder")) {
        obj["file_folder"] = ApiClient.convertToType(
          data["file_folder"],
          "String"
        );
      }
      if (data.hasOwnProperty("file_format")) {
        obj["file_format"] = ApiClient.convertToType(
          data["file_format"],
          "String"
        );
      }
      if (data.hasOwnProperty("filter")) {
        obj["filter"] = Filter.constructFromObject(data["filter"]);
      }
      if (data.hasOwnProperty("fleets")) {
        obj["fleets"] = ApiClient.convertToType(data["fleets"], ["String"]);
      }
      if (data.hasOwnProperty("key_id")) {
        obj["key_id"] = ApiClient.convertToType(data["key_id"], "String");
      }
      if (data.hasOwnProperty("key_secret")) {
        obj["key_secret"] = ApiClient.convertToType(
          data["key_secret"],
          "String"
        );
      }
      if (data.hasOwnProperty("throttle_ms")) {
        obj["throttle_ms"] = ApiClient.convertToType(
          data["throttle_ms"],
          "Number"
        );
      }
      if (data.hasOwnProperty("timeout")) {
        obj["timeout"] = ApiClient.convertToType(data["timeout"], "Number");
      }
      if (data.hasOwnProperty("transform")) {
        obj["transform"] = RouteTransformSettings.constructFromObject(
          data["transform"]
        );
      }
      if (data.hasOwnProperty("url")) {
        obj["url"] = ApiClient.convertToType(data["url"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>S3ArchiveRoute</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3ArchiveRoute</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["archive_id"] &&
      !(
        typeof data["archive_id"] === "string" ||
        data["archive_id"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `archive_id` to be a primitive type in the JSON string but got " +
          data["archive_id"]
      );
    }
    // ensure the json data is a string
    if (
      data["bucket_endpoint"] &&
      !(
        typeof data["bucket_endpoint"] === "string" ||
        data["bucket_endpoint"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `bucket_endpoint` to be a primitive type in the JSON string but got " +
          data["bucket_endpoint"]
      );
    }
    // ensure the json data is a string
    if (
      data["bucket_name"] &&
      !(
        typeof data["bucket_name"] === "string" ||
        data["bucket_name"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `bucket_name` to be a primitive type in the JSON string but got " +
          data["bucket_name"]
      );
    }
    // ensure the json data is a string
    if (
      data["bucket_region"] &&
      !(
        typeof data["bucket_region"] === "string" ||
        data["bucket_region"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `bucket_region` to be a primitive type in the JSON string but got " +
          data["bucket_region"]
      );
    }
    // ensure the json data is a string
    if (
      data["file_access"] &&
      !(
        typeof data["file_access"] === "string" ||
        data["file_access"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `file_access` to be a primitive type in the JSON string but got " +
          data["file_access"]
      );
    }
    // ensure the json data is a string
    if (
      data["file_folder"] &&
      !(
        typeof data["file_folder"] === "string" ||
        data["file_folder"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `file_folder` to be a primitive type in the JSON string but got " +
          data["file_folder"]
      );
    }
    // ensure the json data is a string
    if (
      data["file_format"] &&
      !(
        typeof data["file_format"] === "string" ||
        data["file_format"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `file_format` to be a primitive type in the JSON string but got " +
          data["file_format"]
      );
    }
    // validate the optional field `filter`
    if (data["filter"]) {
      // data not null
      Filter.validateJSON(data["filter"]);
    }
    // ensure the json data is an array
    if (!Array.isArray(data["fleets"])) {
      throw new Error(
        "Expected the field `fleets` to be an array in the JSON data but got " +
          data["fleets"]
      );
    }
    // ensure the json data is a string
    if (
      data["key_id"] &&
      !(typeof data["key_id"] === "string" || data["key_id"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `key_id` to be a primitive type in the JSON string but got " +
          data["key_id"]
      );
    }
    // ensure the json data is a string
    if (
      data["key_secret"] &&
      !(
        typeof data["key_secret"] === "string" ||
        data["key_secret"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `key_secret` to be a primitive type in the JSON string but got " +
          data["key_secret"]
      );
    }
    // validate the optional field `transform`
    if (data["transform"]) {
      // data not null
      RouteTransformSettings.validateJSON(data["transform"]);
    }
    // ensure the json data is a string
    if (
      data["url"] &&
      !(typeof data["url"] === "string" || data["url"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `url` to be a primitive type in the JSON string but got " +
          data["url"]
      );
    }

    return true;
  }
}

/**
 * @member {Number} archive_count_exceeds
 */
S3ArchiveRoute.prototype["archive_count_exceeds"] = undefined;

/**
 * @member {Number} archive_every_mins
 */
S3ArchiveRoute.prototype["archive_every_mins"] = undefined;

/**
 * @member {String} archive_id
 */
S3ArchiveRoute.prototype["archive_id"] = undefined;

/**
 * @member {String} bucket_endpoint
 */
S3ArchiveRoute.prototype["bucket_endpoint"] = undefined;

/**
 * @member {String} bucket_name
 */
S3ArchiveRoute.prototype["bucket_name"] = undefined;

/**
 * @member {String} bucket_region
 */
S3ArchiveRoute.prototype["bucket_region"] = undefined;

/**
 * @member {String} file_access
 */
S3ArchiveRoute.prototype["file_access"] = undefined;

/**
 * @member {String} file_folder
 */
S3ArchiveRoute.prototype["file_folder"] = undefined;

/**
 * @member {String} file_format
 */
S3ArchiveRoute.prototype["file_format"] = undefined;

/**
 * @member {module:model/Filter} filter
 */
S3ArchiveRoute.prototype["filter"] = undefined;

/**
 * @member {Array.<String>} fleets
 */
S3ArchiveRoute.prototype["fleets"] = undefined;

/**
 * @member {String} key_id
 */
S3ArchiveRoute.prototype["key_id"] = undefined;

/**
 * @member {String} key_secret
 */
S3ArchiveRoute.prototype["key_secret"] = undefined;

/**
 * @member {Number} throttle_ms
 */
S3ArchiveRoute.prototype["throttle_ms"] = undefined;

/**
 * @member {Number} timeout
 */
S3ArchiveRoute.prototype["timeout"] = undefined;

/**
 * @member {module:model/RouteTransformSettings} transform
 */
S3ArchiveRoute.prototype["transform"] = undefined;

/**
 * @member {String} url
 */
S3ArchiveRoute.prototype["url"] = undefined;

export default S3ArchiveRoute;
