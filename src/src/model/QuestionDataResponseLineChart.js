/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The QuestionDataResponseLineChart model module.
 * @module model/QuestionDataResponseLineChart
 * @version 1.0.34
 */
class QuestionDataResponseLineChart {
  /**
   * Constructs a new <code>QuestionDataResponseLineChart</code>.
   * @alias module:model/QuestionDataResponseLineChart
   * @param type {module:model/QuestionDataResponseLineChart.TypeEnum} Graph type must be 'lineChart' for a line chart.
   * @param title {String} Title of the chart.
   * @param property {String} The property displayed as the Y-axis for the line chart.
   * @param displayValue {String} Label of the Y-axis for the line chart.
   */
  constructor(type, title, property, displayValue) {
    QuestionDataResponseLineChart.initialize(
      this,
      type,
      title,
      property,
      displayValue
    );
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, type, title, property, displayValue) {
    obj["type"] = type;
    obj["title"] = title;
    obj["property"] = property;
    obj["displayValue"] = displayValue;
  }

  /**
   * Constructs a <code>QuestionDataResponseLineChart</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/QuestionDataResponseLineChart} obj Optional instance to populate.
   * @return {module:model/QuestionDataResponseLineChart} The populated <code>QuestionDataResponseLineChart</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new QuestionDataResponseLineChart();

      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
      if (data.hasOwnProperty("title")) {
        obj["title"] = ApiClient.convertToType(data["title"], "String");
      }
      if (data.hasOwnProperty("property")) {
        obj["property"] = ApiClient.convertToType(data["property"], "String");
      }
      if (data.hasOwnProperty("displayValue")) {
        obj["displayValue"] = ApiClient.convertToType(
          data["displayValue"],
          "String"
        );
      }
      if (data.hasOwnProperty("splitBy")) {
        obj["splitBy"] = ApiClient.convertToType(data["splitBy"], "String");
      }
      if (data.hasOwnProperty("startDate")) {
        obj["startDate"] = ApiClient.convertToType(data["startDate"], "Date");
      }
      if (data.hasOwnProperty("endDate")) {
        obj["endDate"] = ApiClient.convertToType(data["endDate"], "Date");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>QuestionDataResponseLineChart</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionDataResponseLineChart</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of QuestionDataResponseLineChart.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }
    // ensure the json data is a string
    if (
      data["title"] &&
      !(typeof data["title"] === "string" || data["title"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `title` to be a primitive type in the JSON string but got " +
          data["title"]
      );
    }
    // ensure the json data is a string
    if (
      data["property"] &&
      !(
        typeof data["property"] === "string" ||
        data["property"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `property` to be a primitive type in the JSON string but got " +
          data["property"]
      );
    }
    // ensure the json data is a string
    if (
      data["displayValue"] &&
      !(
        typeof data["displayValue"] === "string" ||
        data["displayValue"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `displayValue` to be a primitive type in the JSON string but got " +
          data["displayValue"]
      );
    }
    // ensure the json data is a string
    if (
      data["splitBy"] &&
      !(
        typeof data["splitBy"] === "string" || data["splitBy"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `splitBy` to be a primitive type in the JSON string but got " +
          data["splitBy"]
      );
    }

    return true;
  }
}

QuestionDataResponseLineChart.RequiredProperties = [
  "type",
  "title",
  "property",
  "displayValue",
];

/**
 * Graph type must be 'lineChart' for a line chart.
 * @member {module:model/QuestionDataResponseLineChart.TypeEnum} type
 */
QuestionDataResponseLineChart.prototype["type"] = undefined;

/**
 * Title of the chart.
 * @member {String} title
 */
QuestionDataResponseLineChart.prototype["title"] = undefined;

/**
 * The property displayed as the Y-axis for the line chart.
 * @member {String} property
 */
QuestionDataResponseLineChart.prototype["property"] = undefined;

/**
 * Label of the Y-axis for the line chart.
 * @member {String} displayValue
 */
QuestionDataResponseLineChart.prototype["displayValue"] = undefined;

/**
 * Optional. Split the data by this property to create multiple lines on the chart.
 * @member {String} splitBy
 */
QuestionDataResponseLineChart.prototype["splitBy"] = undefined;

/**
 * Optional start date for filtering/charting data.
 * @member {Date} startDate
 */
QuestionDataResponseLineChart.prototype["startDate"] = undefined;

/**
 * Optional end date for filtering/charting data.
 * @member {Date} endDate
 */
QuestionDataResponseLineChart.prototype["endDate"] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
QuestionDataResponseLineChart["TypeEnum"] = {
  /**
   * value: "lineChart"
   * @const
   */
  lineChart: "lineChart",
};

export default QuestionDataResponseLineChart;
