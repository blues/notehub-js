/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AwsRoute from "./AwsRoute";
import AzureRoute from "./AzureRoute";
import BlynkRoute from "./BlynkRoute";
import DatacakeRoute from "./DatacakeRoute";
import GoogleRoute from "./GoogleRoute";
import HttpRoute from "./HttpRoute";
import MqttRoute from "./MqttRoute";
import ProxyRoute from "./ProxyRoute";
import QubitroRoute from "./QubitroRoute";
import RadRoute from "./RadRoute";
import S3ArchiveRoute from "./S3ArchiveRoute";
import SlackRoute from "./SlackRoute";
import SnowflakeRoute from "./SnowflakeRoute";
import ThingworxRoute from "./ThingworxRoute";
import TwilioRoute from "./TwilioRoute";

/**
 * The NotehubRoute model module.
 * @module model/NotehubRoute
 * @version 2.3.0
 */
class NotehubRoute {
  /**
   * Constructs a new <code>NotehubRoute</code>.
   * Route resource as stored/returned by the server.
   * @alias module:model/NotehubRoute
   */
  constructor() {
    NotehubRoute.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>NotehubRoute</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NotehubRoute} obj Optional instance to populate.
   * @return {module:model/NotehubRoute} The populated <code>NotehubRoute</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new NotehubRoute();

      if (data.hasOwnProperty("aws")) {
        obj["aws"] = AwsRoute.constructFromObject(data["aws"]);
      }
      if (data.hasOwnProperty("azure")) {
        obj["azure"] = AzureRoute.constructFromObject(data["azure"]);
      }
      if (data.hasOwnProperty("blynk")) {
        obj["blynk"] = BlynkRoute.constructFromObject(data["blynk"]);
      }
      if (data.hasOwnProperty("datacake")) {
        obj["datacake"] = DatacakeRoute.constructFromObject(data["datacake"]);
      }
      if (data.hasOwnProperty("disabled")) {
        obj["disabled"] = ApiClient.convertToType(data["disabled"], "Boolean");
      }
      if (data.hasOwnProperty("google")) {
        obj["google"] = GoogleRoute.constructFromObject(data["google"]);
      }
      if (data.hasOwnProperty("http")) {
        obj["http"] = HttpRoute.constructFromObject(data["http"]);
      }
      if (data.hasOwnProperty("label")) {
        obj["label"] = ApiClient.convertToType(data["label"], "String");
      }
      if (data.hasOwnProperty("modified")) {
        obj["modified"] = ApiClient.convertToType(data["modified"], "Date");
      }
      if (data.hasOwnProperty("mqtt")) {
        obj["mqtt"] = MqttRoute.constructFromObject(data["mqtt"]);
      }
      if (data.hasOwnProperty("proxy")) {
        obj["proxy"] = ProxyRoute.constructFromObject(data["proxy"]);
      }
      if (data.hasOwnProperty("qubitro")) {
        obj["qubitro"] = QubitroRoute.constructFromObject(data["qubitro"]);
      }
      if (data.hasOwnProperty("radnote")) {
        obj["radnote"] = RadRoute.constructFromObject(data["radnote"]);
      }
      if (data.hasOwnProperty("s3archive")) {
        obj["s3archive"] = S3ArchiveRoute.constructFromObject(
          data["s3archive"]
        );
      }
      if (data.hasOwnProperty("slack")) {
        obj["slack"] = SlackRoute.constructFromObject(data["slack"]);
      }
      if (data.hasOwnProperty("snowflake")) {
        obj["snowflake"] = SnowflakeRoute.constructFromObject(
          data["snowflake"]
        );
      }
      if (data.hasOwnProperty("thingworx")) {
        obj["thingworx"] = ThingworxRoute.constructFromObject(
          data["thingworx"]
        );
      }
      if (data.hasOwnProperty("twilio")) {
        obj["twilio"] = TwilioRoute.constructFromObject(data["twilio"]);
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
      if (data.hasOwnProperty("uid")) {
        obj["uid"] = ApiClient.convertToType(data["uid"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>NotehubRoute</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotehubRoute</code>.
   */
  static validateJSON(data) {
    // validate the optional field `aws`
    if (data["aws"]) {
      // data not null
      AwsRoute.validateJSON(data["aws"]);
    }
    // validate the optional field `azure`
    if (data["azure"]) {
      // data not null
      AzureRoute.validateJSON(data["azure"]);
    }
    // validate the optional field `blynk`
    if (data["blynk"]) {
      // data not null
      BlynkRoute.validateJSON(data["blynk"]);
    }
    // validate the optional field `datacake`
    if (data["datacake"]) {
      // data not null
      DatacakeRoute.validateJSON(data["datacake"]);
    }
    // validate the optional field `google`
    if (data["google"]) {
      // data not null
      GoogleRoute.validateJSON(data["google"]);
    }
    // validate the optional field `http`
    if (data["http"]) {
      // data not null
      HttpRoute.validateJSON(data["http"]);
    }
    // ensure the json data is a string
    if (
      data["label"] &&
      !(typeof data["label"] === "string" || data["label"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `label` to be a primitive type in the JSON string but got " +
          data["label"]
      );
    }
    // validate the optional field `mqtt`
    if (data["mqtt"]) {
      // data not null
      MqttRoute.validateJSON(data["mqtt"]);
    }
    // validate the optional field `proxy`
    if (data["proxy"]) {
      // data not null
      ProxyRoute.validateJSON(data["proxy"]);
    }
    // validate the optional field `qubitro`
    if (data["qubitro"]) {
      // data not null
      QubitroRoute.validateJSON(data["qubitro"]);
    }
    // validate the optional field `radnote`
    if (data["radnote"]) {
      // data not null
      RadRoute.validateJSON(data["radnote"]);
    }
    // validate the optional field `s3archive`
    if (data["s3archive"]) {
      // data not null
      S3ArchiveRoute.validateJSON(data["s3archive"]);
    }
    // validate the optional field `slack`
    if (data["slack"]) {
      // data not null
      SlackRoute.validateJSON(data["slack"]);
    }
    // validate the optional field `snowflake`
    if (data["snowflake"]) {
      // data not null
      SnowflakeRoute.validateJSON(data["snowflake"]);
    }
    // validate the optional field `thingworx`
    if (data["thingworx"]) {
      // data not null
      ThingworxRoute.validateJSON(data["thingworx"]);
    }
    // validate the optional field `twilio`
    if (data["twilio"]) {
      // data not null
      TwilioRoute.validateJSON(data["twilio"]);
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }
    // ensure the json data is a string
    if (
      data["uid"] &&
      !(typeof data["uid"] === "string" || data["uid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `uid` to be a primitive type in the JSON string but got " +
          data["uid"]
      );
    }

    return true;
  }
}

/**
 * @member {module:model/AwsRoute} aws
 */
NotehubRoute.prototype["aws"] = undefined;

/**
 * @member {module:model/AzureRoute} azure
 */
NotehubRoute.prototype["azure"] = undefined;

/**
 * @member {module:model/BlynkRoute} blynk
 */
NotehubRoute.prototype["blynk"] = undefined;

/**
 * @member {module:model/DatacakeRoute} datacake
 */
NotehubRoute.prototype["datacake"] = undefined;

/**
 * @member {Boolean} disabled
 * @default false
 */
NotehubRoute.prototype["disabled"] = false;

/**
 * @member {module:model/GoogleRoute} google
 */
NotehubRoute.prototype["google"] = undefined;

/**
 * @member {module:model/HttpRoute} http
 */
NotehubRoute.prototype["http"] = undefined;

/**
 * @member {String} label
 */
NotehubRoute.prototype["label"] = undefined;

/**
 * @member {Date} modified
 */
NotehubRoute.prototype["modified"] = undefined;

/**
 * @member {module:model/MqttRoute} mqtt
 */
NotehubRoute.prototype["mqtt"] = undefined;

/**
 * @member {module:model/ProxyRoute} proxy
 */
NotehubRoute.prototype["proxy"] = undefined;

/**
 * @member {module:model/QubitroRoute} qubitro
 */
NotehubRoute.prototype["qubitro"] = undefined;

/**
 * @member {module:model/RadRoute} radnote
 */
NotehubRoute.prototype["radnote"] = undefined;

/**
 * @member {module:model/S3ArchiveRoute} s3archive
 */
NotehubRoute.prototype["s3archive"] = undefined;

/**
 * @member {module:model/SlackRoute} slack
 */
NotehubRoute.prototype["slack"] = undefined;

/**
 * @member {module:model/SnowflakeRoute} snowflake
 */
NotehubRoute.prototype["snowflake"] = undefined;

/**
 * @member {module:model/ThingworxRoute} thingworx
 */
NotehubRoute.prototype["thingworx"] = undefined;

/**
 * @member {module:model/TwilioRoute} twilio
 */
NotehubRoute.prototype["twilio"] = undefined;

/**
 * Mirrors hublib.RouteType.
 * @member {String} type
 */
NotehubRoute.prototype["type"] = undefined;

/**
 * @member {String} uid
 */
NotehubRoute.prototype["uid"] = undefined;

export default NotehubRoute;
