/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DeviceDfuStateMachineNode from "./DeviceDfuStateMachineNode";

/**
 * The DeviceDfuStateMachine model module.
 * @module model/DeviceDfuStateMachine
 * @version 1.0.23-beta.3
 */
class DeviceDfuStateMachine {
  /**
   * Constructs a new <code>DeviceDfuStateMachine</code>.
   * Represents a single request to update the host or Notecard firmware
   * @alias module:model/DeviceDfuStateMachine
   */
  constructor() {
    DeviceDfuStateMachine.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>DeviceDfuStateMachine</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceDfuStateMachine} obj Optional instance to populate.
   * @return {module:model/DeviceDfuStateMachine} The populated <code>DeviceDfuStateMachine</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DeviceDfuStateMachine();

      if (data.hasOwnProperty("requested_version")) {
        obj["requested_version"] = ApiClient.convertToType(
          data["requested_version"],
          "String"
        );
      }
      if (data.hasOwnProperty("current_version")) {
        obj["current_version"] = ApiClient.convertToType(
          data["current_version"],
          "String"
        );
      }
      if (data.hasOwnProperty("initiated")) {
        obj["initiated"] = ApiClient.convertToType(data["initiated"], "String");
      }
      if (data.hasOwnProperty("updates")) {
        obj["updates"] = ApiClient.convertToType(data["updates"], [
          DeviceDfuStateMachineNode,
        ]);
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DeviceDfuStateMachine</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceDfuStateMachine</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["requested_version"] &&
      !(
        typeof data["requested_version"] === "string" ||
        data["requested_version"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `requested_version` to be a primitive type in the JSON string but got " +
          data["requested_version"]
      );
    }
    // ensure the json data is a string
    if (
      data["current_version"] &&
      !(
        typeof data["current_version"] === "string" ||
        data["current_version"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `current_version` to be a primitive type in the JSON string but got " +
          data["current_version"]
      );
    }
    // ensure the json data is a string
    if (
      data["initiated"] &&
      !(
        typeof data["initiated"] === "string" ||
        data["initiated"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `initiated` to be a primitive type in the JSON string but got " +
          data["initiated"]
      );
    }
    if (data["updates"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["updates"])) {
        throw new Error(
          "Expected the field `updates` to be an array in the JSON data but got " +
            data["updates"]
        );
      }
      // validate the optional field `updates` (array)
      for (const item of data["updates"]) {
        DeviceDfuStateMachineNode.validateJsonObject(item);
      }
    }

    return true;
  }
}

/**
 * Version of the firmware that was requested to be installed
 * @member {String} requested_version
 */
DeviceDfuStateMachine.prototype["requested_version"] = undefined;

/**
 * Version of the firmware that was installed prior to this request
 * @member {String} current_version
 */
DeviceDfuStateMachine.prototype["current_version"] = undefined;

/**
 * RFC3339 datetime of when this update was requested
 * @member {String} initiated
 */
DeviceDfuStateMachine.prototype["initiated"] = undefined;

/**
 * @member {Array.<module:model/DeviceDfuStateMachineNode>} updates
 */
DeviceDfuStateMachine.prototype["updates"] = undefined;

export default DeviceDfuStateMachine;
