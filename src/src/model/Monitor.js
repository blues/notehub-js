/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import MonitorAlertRoutesInner from "./MonitorAlertRoutesInner";
import MonitorThresholds from "./MonitorThresholds";

/**
 * The Monitor model module.
 * @module model/Monitor
 * @version 1.0.20
 */
class Monitor {
  /**
   * Constructs a new <code>Monitor</code>.
   * @alias module:model/Monitor
   */
  constructor() {
    Monitor.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Monitor</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Monitor} obj Optional instance to populate.
   * @return {module:model/Monitor} The populated <code>Monitor</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Monitor();

      if (data.hasOwnProperty("uid")) {
        obj["uid"] = ApiClient.convertToType(data["uid"], "String");
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(
          data["description"],
          "String"
        );
      }
      if (data.hasOwnProperty("status")) {
        obj["status"] = ApiClient.convertToType(data["status"], "String");
      }
      if (data.hasOwnProperty("silenced")) {
        obj["silenced"] = ApiClient.convertToType(data["silenced"], "Boolean");
      }
      if (data.hasOwnProperty("source_type")) {
        obj["source_type"] = ApiClient.convertToType(
          data["source_type"],
          "String"
        );
      }
      if (data.hasOwnProperty("source_selector")) {
        obj["source_selector"] = ApiClient.convertToType(
          data["source_selector"],
          "String"
        );
      }
      if (data.hasOwnProperty("condition_type")) {
        obj["condition_type"] = ApiClient.convertToType(
          data["condition_type"],
          "String"
        );
      }
      if (data.hasOwnProperty("notefile_filter")) {
        obj["notefile_filter"] = ApiClient.convertToType(
          data["notefile_filter"],
          ["String"]
        );
      }
      if (data.hasOwnProperty("fleet_filter")) {
        obj["fleet_filter"] = ApiClient.convertToType(data["fleet_filter"], [
          "String",
        ]);
      }
      if (data.hasOwnProperty("severity")) {
        obj["severity"] = ApiClient.convertToType(data["severity"], "String");
      }
      if (data.hasOwnProperty("thresholds")) {
        obj["thresholds"] = MonitorThresholds.constructFromObject(
          data["thresholds"]
        );
      }
      if (data.hasOwnProperty("routing_cooldown_period")) {
        obj["routing_cooldown_period"] = ApiClient.convertToType(
          data["routing_cooldown_period"],
          "String"
        );
      }
      if (data.hasOwnProperty("alert_routes")) {
        obj["alert_routes"] = ApiClient.convertToType(data["alert_routes"], [
          MonitorAlertRoutesInner,
        ]);
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Monitor</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Monitor</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["uid"] &&
      !(typeof data["uid"] === "string" || data["uid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `uid` to be a primitive type in the JSON string but got " +
          data["uid"]
      );
    }
    // ensure the json data is a string
    if (
      data["name"] &&
      !(typeof data["name"] === "string" || data["name"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `name` to be a primitive type in the JSON string but got " +
          data["name"]
      );
    }
    // ensure the json data is a string
    if (
      data["description"] &&
      !(
        typeof data["description"] === "string" ||
        data["description"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `description` to be a primitive type in the JSON string but got " +
          data["description"]
      );
    }
    // ensure the json data is a string
    if (
      data["status"] &&
      !(typeof data["status"] === "string" || data["status"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `status` to be a primitive type in the JSON string but got " +
          data["status"]
      );
    }
    // ensure the json data is a string
    if (
      data["source_type"] &&
      !(
        typeof data["source_type"] === "string" ||
        data["source_type"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `source_type` to be a primitive type in the JSON string but got " +
          data["source_type"]
      );
    }
    // ensure the json data is a string
    if (
      data["source_selector"] &&
      !(
        typeof data["source_selector"] === "string" ||
        data["source_selector"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `source_selector` to be a primitive type in the JSON string but got " +
          data["source_selector"]
      );
    }
    // ensure the json data is a string
    if (
      data["condition_type"] &&
      !(
        typeof data["condition_type"] === "string" ||
        data["condition_type"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `condition_type` to be a primitive type in the JSON string but got " +
          data["condition_type"]
      );
    }
    // ensure the json data is an array
    if (!Array.isArray(data["notefile_filter"])) {
      throw new Error(
        "Expected the field `notefile_filter` to be an array in the JSON data but got " +
          data["notefile_filter"]
      );
    }
    // ensure the json data is an array
    if (!Array.isArray(data["fleet_filter"])) {
      throw new Error(
        "Expected the field `fleet_filter` to be an array in the JSON data but got " +
          data["fleet_filter"]
      );
    }
    // ensure the json data is a string
    if (
      data["severity"] &&
      !(
        typeof data["severity"] === "string" ||
        data["severity"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `severity` to be a primitive type in the JSON string but got " +
          data["severity"]
      );
    }
    // validate the optional field `thresholds`
    if (data["thresholds"]) {
      // data not null
      MonitorThresholds.validateJSON(data["thresholds"]);
    }
    // ensure the json data is a string
    if (
      data["routing_cooldown_period"] &&
      !(
        typeof data["routing_cooldown_period"] === "string" ||
        data["routing_cooldown_period"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `routing_cooldown_period` to be a primitive type in the JSON string but got " +
          data["routing_cooldown_period"]
      );
    }
    if (data["alert_routes"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["alert_routes"])) {
        throw new Error(
          "Expected the field `alert_routes` to be an array in the JSON data but got " +
            data["alert_routes"]
        );
      }
      // validate the optional field `alert_routes` (array)
      for (const item of data["alert_routes"]) {
        MonitorAlertRoutesInner.validateJsonObject(item);
      }
    }

    return true;
  }
}

/**
 * @member {String} uid
 */
Monitor.prototype["uid"] = undefined;

/**
 * @member {String} name
 */
Monitor.prototype["name"] = undefined;

/**
 * @member {String} description
 */
Monitor.prototype["description"] = undefined;

/**
 * The status of the monitor.
 * @member {module:model/Monitor.StatusEnum} status
 */
Monitor.prototype["status"] = undefined;

/**
 * If true, alerts will be created, but no notifications will be sent.
 * @member {Boolean} silenced
 */
Monitor.prototype["silenced"] = undefined;

/**
 * The type of source to monitor. Currently only \"event\" is supported.
 * @member {module:model/Monitor.SourceTypeEnum} source_type
 */
Monitor.prototype["source_type"] = undefined;

/**
 * A valid JSONata expression that selects the value to monitor from the source. | It should return a single, numeric value.
 * @member {String} source_selector
 */
Monitor.prototype["source_selector"] = undefined;

/**
 * The type of condition to apply to the value selected by the source_selector
 * @member {module:model/Monitor.ConditionTypeEnum} condition_type
 */
Monitor.prototype["condition_type"] = undefined;

/**
 * @member {Array.<String>} notefile_filter
 */
Monitor.prototype["notefile_filter"] = undefined;

/**
 * @member {Array.<String>} fleet_filter
 */
Monitor.prototype["fleet_filter"] = undefined;

/**
 * @member {module:model/Monitor.SeverityEnum} severity
 */
Monitor.prototype["severity"] = undefined;

/**
 * @member {module:model/MonitorThresholds} thresholds
 */
Monitor.prototype["thresholds"] = undefined;

/**
 * The time period to wait before routing another event after the monitor | has been triggered. It follows the format of a number followed by a time unit.
 * @member {String} routing_cooldown_period
 */
Monitor.prototype["routing_cooldown_period"] = undefined;

/**
 * @member {Array.<module:model/MonitorAlertRoutesInner>} alert_routes
 */
Monitor.prototype["alert_routes"] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Monitor["StatusEnum"] = {
  /**
   * value: "disabled"
   * @const
   */
  disabled: "disabled",

  /**
   * value: "enabled"
   * @const
   */
  enabled: "enabled",
};

/**
 * Allowed values for the <code>source_type</code> property.
 * @enum {String}
 * @readonly
 */
Monitor["SourceTypeEnum"] = {
  /**
   * value: "event"
   * @const
   */
  event: "event",
};

/**
 * Allowed values for the <code>condition_type</code> property.
 * @enum {String}
 * @readonly
 */
Monitor["ConditionTypeEnum"] = {
  /**
   * value: "greater_than"
   * @const
   */
  greater_than: "greater_than",

  /**
   * value: "greater_than_or_equal_to"
   * @const
   */
  greater_than_or_equal_to: "greater_than_or_equal_to",

  /**
   * value: "less_than"
   * @const
   */
  less_than: "less_than",

  /**
   * value: "less_than_or_equal_to"
   * @const
   */
  less_than_or_equal_to: "less_than_or_equal_to",

  /**
   * value: "equal_to"
   * @const
   */
  equal_to: "equal_to",

  /**
   * value: "not_equal_to"
   * @const
   */
  not_equal_to: "not_equal_to",
};

/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
Monitor["SeverityEnum"] = {
  /**
   * value: "warn"
   * @const
   */
  warn: "warn",

  /**
   * value: "alarm"
   * @const
   */
  alarm: "alarm",
};

export default Monitor;
