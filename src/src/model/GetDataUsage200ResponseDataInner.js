/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import UsageData from "./UsageData";

/**
 * The GetDataUsage200ResponseDataInner model module.
 * @module model/GetDataUsage200ResponseDataInner
 * @version 2.2.1
 */
class GetDataUsage200ResponseDataInner {
  /**
   * Constructs a new <code>GetDataUsage200ResponseDataInner</code>.
   * @alias module:model/GetDataUsage200ResponseDataInner
   * @param data {Array.<module:model/UsageData>}
   * @param type {module:model/GetDataUsage200ResponseDataInner.TypeEnum} The type of connectivity
   */
  constructor(data, type) {
    GetDataUsage200ResponseDataInner.initialize(this, data, type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, data, type) {
    obj["data"] = data;
    obj["type"] = type;
  }

  /**
   * Constructs a <code>GetDataUsage200ResponseDataInner</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetDataUsage200ResponseDataInner} obj Optional instance to populate.
   * @return {module:model/GetDataUsage200ResponseDataInner} The populated <code>GetDataUsage200ResponseDataInner</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GetDataUsage200ResponseDataInner();

      if (data.hasOwnProperty("data")) {
        obj["data"] = ApiClient.convertToType(data["data"], [UsageData]);
      }
      if (data.hasOwnProperty("device")) {
        obj["device"] = ApiClient.convertToType(data["device"], "String");
      }
      if (data.hasOwnProperty("fleet")) {
        obj["fleet"] = ApiClient.convertToType(data["fleet"], "String");
      }
      if (data.hasOwnProperty("iccid")) {
        obj["iccid"] = ApiClient.convertToType(data["iccid"], "String");
      }
      if (data.hasOwnProperty("imsi")) {
        obj["imsi"] = ApiClient.convertToType(data["imsi"], "String");
      }
      if (data.hasOwnProperty("type")) {
        obj["type"] = ApiClient.convertToType(data["type"], "String");
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>GetDataUsage200ResponseDataInner</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDataUsage200ResponseDataInner</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of GetDataUsage200ResponseDataInner.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data)
        );
      }
    }
    if (data["data"]) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data["data"])) {
        throw new Error(
          "Expected the field `data` to be an array in the JSON data but got " +
            data["data"]
        );
      }
      // validate the optional field `data` (array)
      for (const item of data["data"]) {
        UsageData.validateJsonObject(item);
      }
    }
    // ensure the json data is a string
    if (
      data["device"] &&
      !(typeof data["device"] === "string" || data["device"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `device` to be a primitive type in the JSON string but got " +
          data["device"]
      );
    }
    // ensure the json data is a string
    if (
      data["fleet"] &&
      !(typeof data["fleet"] === "string" || data["fleet"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `fleet` to be a primitive type in the JSON string but got " +
          data["fleet"]
      );
    }
    // ensure the json data is a string
    if (
      data["iccid"] &&
      !(typeof data["iccid"] === "string" || data["iccid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `iccid` to be a primitive type in the JSON string but got " +
          data["iccid"]
      );
    }
    // ensure the json data is a string
    if (
      data["imsi"] &&
      !(typeof data["imsi"] === "string" || data["imsi"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `imsi` to be a primitive type in the JSON string but got " +
          data["imsi"]
      );
    }
    // ensure the json data is a string
    if (
      data["type"] &&
      !(typeof data["type"] === "string" || data["type"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `type` to be a primitive type in the JSON string but got " +
          data["type"]
      );
    }

    return true;
  }
}

GetDataUsage200ResponseDataInner.RequiredProperties = ["data", "type"];

/**
 * @member {Array.<module:model/UsageData>} data
 */
GetDataUsage200ResponseDataInner.prototype["data"] = undefined;

/**
 * The device UID this usage data belongs to (only present when aggregate is 'device')
 * @member {String} device
 */
GetDataUsage200ResponseDataInner.prototype["device"] = undefined;

/**
 * The fleet UID this usage data belongs to (only present when aggregate is 'fleet')
 * @member {String} fleet
 */
GetDataUsage200ResponseDataInner.prototype["fleet"] = undefined;

/**
 * The ICCID of the cellular SIM card (only present when type is 'cellular')
 * @member {String} iccid
 */
GetDataUsage200ResponseDataInner.prototype["iccid"] = undefined;

/**
 * The IMSI of the satellite device (only present when type is 'satellite')
 * @member {String} imsi
 */
GetDataUsage200ResponseDataInner.prototype["imsi"] = undefined;

/**
 * The type of connectivity
 * @member {module:model/GetDataUsage200ResponseDataInner.TypeEnum} type
 */
GetDataUsage200ResponseDataInner.prototype["type"] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GetDataUsage200ResponseDataInner["TypeEnum"] = {
  /**
   * value: "cellular"
   * @const
   */
  cellular: "cellular",

  /**
   * value: "satellite"
   * @const
   */
  satellite: "satellite",
};

export default GetDataUsage200ResponseDataInner;
