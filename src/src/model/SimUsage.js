/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The SimUsage model module.
 * @module model/SimUsage
 * @version 1.0.32
 */
class SimUsage {
  /**
   * Constructs a new <code>SimUsage</code>.
   * @alias module:model/SimUsage
   */
  constructor() {
    SimUsage.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>SimUsage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SimUsage} obj Optional instance to populate.
   * @return {module:model/SimUsage} The populated <code>SimUsage</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SimUsage();

      if (data.hasOwnProperty("iccid")) {
        obj["iccid"] = ApiClient.convertToType(data["iccid"], "String");
      }
      if (data.hasOwnProperty("used")) {
        obj["used"] = ApiClient.convertToType(data["used"], "Number");
      }
      if (data.hasOwnProperty("limit")) {
        obj["limit"] = ApiClient.convertToType(data["limit"], "Number");
      }
      if (data.hasOwnProperty("lifetimeUsed")) {
        obj["lifetimeUsed"] = ApiClient.convertToType(
          data["lifetimeUsed"],
          "Number"
        );
      }
      if (data.hasOwnProperty("lastUpdated")) {
        obj["lastUpdated"] = ApiClient.convertToType(
          data["lastUpdated"],
          "Number"
        );
      }
    } else if (data === null) {
      return null;
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>SimUsage</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimUsage</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["iccid"] &&
      !(typeof data["iccid"] === "string" || data["iccid"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `iccid` to be a primitive type in the JSON string but got " +
          data["iccid"]
      );
    }

    return true;
  }
}

/**
 * ICCID of the SIM card
 * @member {String} iccid
 */
SimUsage.prototype["iccid"] = undefined;

/**
 * Bytes used on the SIMs current data plan
 * @member {Number} used
 */
SimUsage.prototype["used"] = undefined;

/**
 * Limit in bytes of the SIMs current data plan
 * @member {Number} limit
 */
SimUsage.prototype["limit"] = undefined;

/**
 * Total number of bytes used by SIM
 * @member {Number} lifetimeUsed
 */
SimUsage.prototype["lifetimeUsed"] = undefined;

/**
 * Time this usage information was last updated
 * @member {Number} lastUpdated
 */
SimUsage.prototype["lastUpdated"] = undefined;

export default SimUsage;
