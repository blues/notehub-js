/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Aws from "./Aws";
import AwsFilter from "./AwsFilter";
import Azure from "./Azure";
import Google from "./Google";
import Http from "./Http";
import Mqtt from "./Mqtt";
import Proxy from "./Proxy";
import Radresponder from "./Radresponder";
import Slack from "./Slack";
import SlackTransform from "./SlackTransform";
import Snowflake from "./Snowflake";
import Thingworx from "./Thingworx";

/**
 * The NotehubRouteSchema model module.
 * @module model/NotehubRouteSchema
 * @version 2.2.0
 */
class NotehubRouteSchema {
  /**
   * Constructs a new <code>NotehubRouteSchema</code>.
   * @alias module:model/NotehubRouteSchema
   * @param {(module:model/Aws|module:model/Azure|module:model/Google|module:model/Http|module:model/Mqtt|module:model/Proxy|module:model/Radresponder|module:model/Slack|module:model/Snowflake|module:model/Thingworx)} instance The actual instance to initialize NotehubRouteSchema.
   */
  constructor(instance = null) {
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    try {
      if (typeof instance === "Http") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Http.validateJSON(instance); // throw an exception if no match
        // create Http from JS object
        this.actualInstance = Http.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Http
      errorMessages.push("Failed to construct Http: " + err);
    }

    try {
      if (typeof instance === "Google") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Google.validateJSON(instance); // throw an exception if no match
        // create Google from JS object
        this.actualInstance = Google.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Google
      errorMessages.push("Failed to construct Google: " + err);
    }

    try {
      if (typeof instance === "Proxy") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Proxy.validateJSON(instance); // throw an exception if no match
        // create Proxy from JS object
        this.actualInstance = Proxy.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Proxy
      errorMessages.push("Failed to construct Proxy: " + err);
    }

    try {
      if (typeof instance === "Mqtt") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Mqtt.validateJSON(instance); // throw an exception if no match
        // create Mqtt from JS object
        this.actualInstance = Mqtt.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Mqtt
      errorMessages.push("Failed to construct Mqtt: " + err);
    }

    try {
      if (typeof instance === "Aws") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Aws.validateJSON(instance); // throw an exception if no match
        // create Aws from JS object
        this.actualInstance = Aws.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Aws
      errorMessages.push("Failed to construct Aws: " + err);
    }

    try {
      if (typeof instance === "Radresponder") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Radresponder.validateJSON(instance); // throw an exception if no match
        // create Radresponder from JS object
        this.actualInstance = Radresponder.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Radresponder
      errorMessages.push("Failed to construct Radresponder: " + err);
    }

    try {
      if (typeof instance === "Azure") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Azure.validateJSON(instance); // throw an exception if no match
        // create Azure from JS object
        this.actualInstance = Azure.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Azure
      errorMessages.push("Failed to construct Azure: " + err);
    }

    try {
      if (typeof instance === "Thingworx") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Thingworx.validateJSON(instance); // throw an exception if no match
        // create Thingworx from JS object
        this.actualInstance = Thingworx.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Thingworx
      errorMessages.push("Failed to construct Thingworx: " + err);
    }

    try {
      if (typeof instance === "Snowflake") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Snowflake.validateJSON(instance); // throw an exception if no match
        // create Snowflake from JS object
        this.actualInstance = Snowflake.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Snowflake
      errorMessages.push("Failed to construct Snowflake: " + err);
    }

    try {
      if (typeof instance === "Slack") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Slack.validateJSON(instance); // throw an exception if no match
        // create Slack from JS object
        this.actualInstance = Slack.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Slack
      errorMessages.push("Failed to construct Slack: " + err);
    }

    if (match > 1) {
      throw new Error(
        "Multiple matches found constructing `NotehubRouteSchema` with oneOf schemas Aws, Azure, Google, Http, Mqtt, Proxy, Radresponder, Slack, Snowflake, Thingworx. Input: " +
          JSON.stringify(instance)
      );
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches
      throw new Error(
        "No match found constructing `NotehubRouteSchema` with oneOf schemas Aws, Azure, Google, Http, Mqtt, Proxy, Radresponder, Slack, Snowflake, Thingworx. Details: " +
          errorMessages.join(", ")
      );
    } else {
      // only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>NotehubRouteSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NotehubRouteSchema} obj Optional instance to populate.
   * @return {module:model/NotehubRouteSchema} The populated <code>NotehubRouteSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    return new NotehubRouteSchema(data);
  }

  /**
   * Gets the actaul instance, which can be <code>Aws</code>, <code>Azure</code>, <code>Google</code>, <code>Http</code>, <code>Mqtt</code>, <code>Proxy</code>, <code>Radresponder</code>, <code>Slack</code>, <code>Snowflake</code>, <code>Thingworx</code>.
   * @return {(module:model/Aws|module:model/Azure|module:model/Google|module:model/Http|module:model/Mqtt|module:model/Proxy|module:model/Radresponder|module:model/Slack|module:model/Snowflake|module:model/Thingworx)} The actual instance.
   */
  getActualInstance() {
    return this.actualInstance;
  }

  /**
   * Sets the actaul instance, which can be <code>Aws</code>, <code>Azure</code>, <code>Google</code>, <code>Http</code>, <code>Mqtt</code>, <code>Proxy</code>, <code>Radresponder</code>, <code>Slack</code>, <code>Snowflake</code>, <code>Thingworx</code>.
   * @param {(module:model/Aws|module:model/Azure|module:model/Google|module:model/Http|module:model/Mqtt|module:model/Proxy|module:model/Radresponder|module:model/Slack|module:model/Snowflake|module:model/Thingworx)} obj The actual instance.
   */
  setActualInstance(obj) {
    this.actualInstance =
      NotehubRouteSchema.constructFromObject(obj).getActualInstance();
  }

  /**
   * Returns the JSON representation of the actual intance.
   * @return {string}
   */
  toJSON = function () {
    return this.getActualInstance();
  };

  /**
   * Create an instance of NotehubRouteSchema from a JSON string.
   * @param {string} json_string JSON string.
   * @return {module:model/NotehubRouteSchema} An instance of NotehubRouteSchema.
   */
  static fromJSON = function (json_string) {
    return NotehubRouteSchema.constructFromObject(JSON.parse(json_string));
  };
}

/**
 * @member {Boolean} disable_http_headers
 * @default false
 */
NotehubRouteSchema.prototype["disable_http_headers"] = false;

/**
 * @member {module:model/AwsFilter} filter
 */
NotehubRouteSchema.prototype["filter"] = undefined;

/**
 * list of Fleet UIDs to apply route to, if any.  If empty, applies to all Fleets
 * @member {Array.<String>} fleets
 */
NotehubRouteSchema.prototype["fleets"] = undefined;

/**
 * @member {Object.<String, String>} http_headers
 */
NotehubRouteSchema.prototype["http_headers"] = undefined;

/**
 * Minimum time between requests in Miliseconds
 * @member {Number} throttle_ms
 */
NotehubRouteSchema.prototype["throttle_ms"] = undefined;

/**
 * Timeout in seconds for each request
 * @member {Number} timeout
 * @default 15
 */
NotehubRouteSchema.prototype["timeout"] = 15;

/**
 * @member {module:model/SlackTransform} transform
 */
NotehubRouteSchema.prototype["transform"] = undefined;

/**
 * @member {String} url
 */
NotehubRouteSchema.prototype["url"] = undefined;

/**
 * Optional authentication token
 * @member {String} token
 */
NotehubRouteSchema.prototype["token"] = undefined;

/**
 * @member {String} alias
 */
NotehubRouteSchema.prototype["alias"] = undefined;

/**
 * @member {String} broker
 */
NotehubRouteSchema.prototype["broker"] = undefined;

/**
 * Certificate with \\n newlines.  This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} certificate
 */
NotehubRouteSchema.prototype["certificate"] = undefined;

/**
 * Name of certificate.
 * @member {String} certificate_name
 */
NotehubRouteSchema.prototype["certificate_name"] = undefined;

/**
 * Key with \\n newlines.  This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} key
 */
NotehubRouteSchema.prototype["key"] = undefined;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} password
 */
NotehubRouteSchema.prototype["password"] = undefined;

/**
 * @member {Number} port
 */
NotehubRouteSchema.prototype["port"] = undefined;

/**
 * Name of PEM key.  If omitted, defaults to \"present\"
 * @member {String} private_key_name
 * @default 'present'
 */
NotehubRouteSchema.prototype["private_key_name"] = "present";

/**
 * @member {String} topic
 */
NotehubRouteSchema.prototype["topic"] = undefined;

/**
 * @member {String} username
 */
NotehubRouteSchema.prototype["username"] = undefined;

/**
 * @member {String} access_key_id
 */
NotehubRouteSchema.prototype["access_key_id"] = undefined;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} access_key_secret
 */
NotehubRouteSchema.prototype["access_key_secret"] = undefined;

/**
 * The Channel ID for Bearer Token method, if the \"slack-bearer\" type is selected
 * @member {String} channel
 */
NotehubRouteSchema.prototype["channel"] = undefined;

/**
 * @member {String} message_deduplication_id
 */
NotehubRouteSchema.prototype["message_deduplication_id"] = undefined;

/**
 * @member {String} message_group_id
 */
NotehubRouteSchema.prototype["message_group_id"] = undefined;

/**
 * @member {String} region
 */
NotehubRouteSchema.prototype["region"] = undefined;

/**
 * @member {String} client_id
 */
NotehubRouteSchema.prototype["client_id"] = undefined;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} client_secret
 */
NotehubRouteSchema.prototype["client_secret"] = undefined;

/**
 * @member {String} data_feed_key
 */
NotehubRouteSchema.prototype["data_feed_key"] = undefined;

/**
 * @member {Boolean} test_api
 * @default false
 */
NotehubRouteSchema.prototype["test_api"] = false;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} functions_key_secret
 */
NotehubRouteSchema.prototype["functions_key_secret"] = undefined;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} sas_policy_key
 */
NotehubRouteSchema.prototype["sas_policy_key"] = undefined;

/**
 * @member {String} sas_policy_name
 */
NotehubRouteSchema.prototype["sas_policy_name"] = undefined;

/**
 * This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} app_key
 */
NotehubRouteSchema.prototype["app_key"] = undefined;

/**
 * @member {String} account_name
 */
NotehubRouteSchema.prototype["account_name"] = undefined;

/**
 * @member {String} organization_name
 */
NotehubRouteSchema.prototype["organization_name"] = undefined;

/**
 * PEM key with \\n newlines. This value is input-only and will be omitted from the response and replaced with a placeholder
 * @member {String} pem
 */
NotehubRouteSchema.prototype["pem"] = undefined;

/**
 * @member {String} user_name
 */
NotehubRouteSchema.prototype["user_name"] = undefined;

/**
 * The Bearer Token for Slack messaging, if the \"slack-bearer\" type is selected
 * @member {String} bearer
 */
NotehubRouteSchema.prototype["bearer"] = undefined;

/**
 * The Blocks message to be sent.  If populated, this field overrides the text field within the Slack Messaging API.  Placeholders are available for this field.
 * @member {String} blocks
 */
NotehubRouteSchema.prototype["blocks"] = undefined;

/**
 * The type of Slack message.  Must be one of \"slack-bearer\" for Bearer Token or \"slack-webhook\" for Webhook messages
 * @member {String} slack_type
 */
NotehubRouteSchema.prototype["slack_type"] = undefined;

/**
 * The simple text message to be sent, if the blocks message field is not in use.  Placeholders are available for this field.
 * @member {String} text
 */
NotehubRouteSchema.prototype["text"] = undefined;

/**
 * The Webhook URL for Slack Messaging if the \"slack-webhook\" type is selected
 * @member {String} webhook_url
 */
NotehubRouteSchema.prototype["webhook_url"] = undefined;

NotehubRouteSchema.OneOf = [
  "Aws",
  "Azure",
  "Google",
  "Http",
  "Mqtt",
  "Proxy",
  "Radresponder",
  "Slack",
  "Snowflake",
  "Thingworx",
];

export default NotehubRouteSchema;
