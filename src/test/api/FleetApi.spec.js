/**
 * Notehub API
 * The OpenAPI definition for the Notehub.io API. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@blues.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BluesNotehubJs);
  }
}(this, function(expect, BluesNotehubJs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BluesNotehubJs.FleetApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FleetApi', function() {
    describe('createFleet', function() {
      it('should call createFleet successfully', function(done) {
        //uncomment below and update the code to test createFleet
        //instance.createFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeviceFleets', function() {
      it('should call deleteDeviceFleets successfully', function(done) {
        //uncomment below and update the code to test deleteDeviceFleets
        //instance.deleteDeviceFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFleet', function() {
      it('should call deleteFleet successfully', function(done) {
        //uncomment below and update the code to test deleteFleet
        //instance.deleteFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFleetEnvironmentVariable', function() {
      it('should call deleteFleetEnvironmentVariable successfully', function(done) {
        //uncomment below and update the code to test deleteFleetEnvironmentVariable
        //instance.deleteFleetEnvironmentVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeviceFleets', function() {
      it('should call getDeviceFleets successfully', function(done) {
        //uncomment below and update the code to test getDeviceFleets
        //instance.getDeviceFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFleetEnvironmentVariables', function() {
      it('should call getFleetEnvironmentVariables successfully', function(done) {
        //uncomment below and update the code to test getFleetEnvironmentVariables
        //instance.getFleetEnvironmentVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFleetEvents', function() {
      it('should call getFleetEvents successfully', function(done) {
        //uncomment below and update the code to test getFleetEvents
        //instance.getFleetEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFleetEventsByCursor', function() {
      it('should call getFleetEventsByCursor successfully', function(done) {
        //uncomment below and update the code to test getFleetEventsByCursor
        //instance.getFleetEventsByCursor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectFleetDevices', function() {
      it('should call getProjectFleetDevices successfully', function(done) {
        //uncomment below and update the code to test getProjectFleetDevices
        //instance.getProjectFleetDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectFleets', function() {
      it('should call getProjectFleets successfully', function(done) {
        //uncomment below and update the code to test getProjectFleets
        //instance.getProjectFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDeviceFleets', function() {
      it('should call putDeviceFleets successfully', function(done) {
        //uncomment below and update the code to test putDeviceFleets
        //instance.putDeviceFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFleetEnvironmentVariables', function() {
      it('should call putFleetEnvironmentVariables successfully', function(done) {
        //uncomment below and update the code to test putFleetEnvironmentVariables
        //instance.putFleetEnvironmentVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFleet', function() {
      it('should call updateFleet successfully', function(done) {
        //uncomment below and update the code to test updateFleet
        //instance.updateFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
