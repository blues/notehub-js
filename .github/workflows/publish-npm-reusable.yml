name: Reusable npm publish workflow

on:
  workflow_call:
    inputs:
      is_beta:
        description: "Whether this is a beta release"
        required: true
        type: boolean

permissions:
  id-token: write # Required for OIDC trusted publishing
  contents: write # Required to push version updates for beta

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Beta-only: Version management
      - name: Get current version from config.json
        if: inputs.is_beta
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r .projectVersion config.json)
          echo "Current project version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Get existing beta versions from npm
        if: inputs.is_beta
        id: get_existing_versions
        run: bash ./.github/scripts/get-existing-beta-versions.sh $CURRENT_VERSION

      - name: Update version to beta
        if: inputs.is_beta
        run: |
          # Update config.json with the new beta version
          jq --arg new_version "$new_version" '.projectVersion = $new_version' config.json > config.tmp.json && mv config.tmp.json config.json

          echo "Updated project version to: $new_version"

      - name: Setup .npmrc file to publish to npm
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"
          registry-url: "https://registry.npmjs.org"

      - name: Update npm
        run: sudo npm install -g npm@latest

      - name: Verify npm version
        run: npm --version

      # Beta: Install dependencies and regenerate SDK
      - name: Install Dependencies
        if: inputs.is_beta
        run: npm install

      - name: Remove Outdated SDK Folder
        if: inputs.is_beta
        run: rm -rf src

      - name: Generate New SDK
        if: inputs.is_beta
        run: npm run prepareFreshRelease

      # Production: Just install dependencies in src folder
      - name: Install dependencies
        if: ${{ !inputs.is_beta }}
        working-directory: ./src
        run: npm ci

      # Publish to npm
      - name: Publish to npm
        working-directory: ${{ inputs.is_beta && './src' || './src' }}
        run: |
          if [ "${{ inputs.is_beta }}" == "true" ]; then
            echo "Publishing beta version to npm... $new_version"
            npm publish --tag beta --provenance --access public
          else
            npm publish --provenance --access public
          fi

      # Beta-only: Commit updated config.json
      - name: Commit Updated config.json
        if: inputs.is_beta
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add config.json
          git commit -m "Update project version to $new_version [skip ci]"
          git push
