name: Publish beta version of notehub-js to npm

on:
  # todo refactor to be automated version bump upon update to PR with branch name of `text-release-*`
  workflow_dispatch:
    inputs:
      beta_version_suffix:
        description: 'Beta version suffix, e.g., "1", "2" for 1.0.21-beta.1, 1.0.21-beta.2'
        required: true
        default: "1"
      dry_run:
        description: "If true, run without actually publishing the package"
        required: false
        default: "false"

jobs:
  publish-beta:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version from config.json
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r .projectVersion config.json)
          echo "Current project version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Update Version to Beta
        id: update_version
        run: |
          # Get the beta suffix from the input
          BETA_SUFFIX="${{ github.event.inputs.beta_version_suffix }}"

          # If the current version already has a beta suffix, replace it with the new one
          if [[ "$CURRENT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-beta\.[0-9]+)?$ ]]; then
            # Extract major, minor, and patch parts of the version
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            # Replace or add the new beta suffix
            NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$BETA_SUFFIX"
          else
            echo "Error: Current version format is not compatible. Please ensure it follows the semantic versioning format."
            exit 1
          fi

          # Update config.json with the new version
          jq --arg new_version "$NEW_VERSION" '.projectVersion = $new_version' config.json > config.tmp.json && mv config.tmp.json config.json

          echo "Updated project version to: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm install

      - name: Remove Outdated SDK Folder
        run: rm -rf src

      - name: Generate New SDK
        run: npm run generateDocs

      - name: Setup .npmrc file to publish to npm
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Publish Beta Version to npm
        run: |
          cd src
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "Dry run mode enabled: Skipping actual npm publish"
          else
            npm publish --tag beta --access public
          fi

        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit Updated config.json
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add config.json
          git commit -m "Update project version to ${{ steps.update_version.outputs.new_version }} [skip ci]"
          git push
